[{"path":"https://mharinga.github.io/insurancerating/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Martin Haringa. Author, maintainer.","code":""},{"path":"https://mharinga.github.io/insurancerating/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Haringa M (2024). insurancerating: Analytic Insurance Rating Techniques. R package version 0.7.5, https://github.com/MHaringa/insurancerating, https://mharinga.github.io/insurancerating/.","code":"@Manual{,   title = {insurancerating: Analytic Insurance Rating Techniques},   author = {Martin Haringa},   year = {2024},   note = {R package version 0.7.5, https://github.com/MHaringa/insurancerating},   url = {https://mharinga.github.io/insurancerating/}, }"},{"path":"https://mharinga.github.io/insurancerating/index.html","id":"insurancerating-","dir":"","previous_headings":"","what":"Analytic Insurance Rating Techniques","title":"Analytic Insurance Rating Techniques","text":"insurancerating package provides functions build, evaluate, visualize insurance rating models. insurancerating simplifies process modeling premiums, allows analyze insurance risk factors effectively.","code":""},{"path":"https://mharinga.github.io/insurancerating/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Analytic Insurance Rating Techniques","text":"Install insurancerating CRAN: development version GitHub:","code":"install.packages(\"insurancerating\") # install.packages(\"remotes\") remotes::install_github(\"MHaringa/insurancerating\")"},{"path":"https://mharinga.github.io/insurancerating/index.html","id":"univariate","dir":"","previous_headings":"","what":"Univariate","title":"Analytic Insurance Rating Techniques","text":"univariate analysis focuses examining overall claim frequency, severity, risk premium. primary objective assess whether experience data reasonable comparing past experiences using expert judgment. section provides straightforward example perform univariate analysis MTPL portfolio using insurancerating. univariate() displays basic risk indicators segmented levels discrete risk factor: following indicators calculated: frequency (.e. frequency = number claims / exposure) average_severity (.e. average severity = severity / number claims) risk_premium (.e. risk premium = severity / exposure = frequency x average severity) loss_ratio (.e. loss ratio = severity / premium) average_premium (.e. average premium = premium / exposure) Note Exposure Risk Premium insurance, exposure refers level risk insurer takes providing coverage certain asset, like vehicle, period time. example, vehicle insurance, exposure often measured vehicle-years, indicating long vehicle covered likelihood claim made. example, vehicle insurance: car insured full year, exposure counted 1. vehicle insured six months, exposure 0.5. Additionally, term risk premium used interchangeably pure premium burning cost. terms represent amount premium required cover expected loss, without including additional expenses profit margins. additional options available univariate(), following explains important ones. univariate() disregards missing input arguments. example, premium severity provided, calculate claim frequency. However, table small easy understand, information might presented effectively graph, shown .  autoplot.univariate(), show_plots specifies plots display order appear. available plots include: frequency average_severity risk_premium loss_ratio average_premium exposure severity nclaims premium instance, display exposure claim frequency plots:  check whether claim frequency remains consistent years important identifying trends irregularities:  remove bars plot display line graph, use background = FALSE:  sort arranges levels risk factor descending order based exposure:  sort_manual allows arrange levels discrete risk factor according preferred order. useful levels natural sequence want exclude certain levels output.  graph illustrates additional options:  Alternatively, can create bar graph display number claims; last univariate() plot options presented :  addition univariate(), another option one-way analysis histbin(). function allows create histogram continuous variables:  context insurance, common encounter outliers data, one way address issue grouping outliers single bin:  Alternatively, can apply logarithmic transformation remove outliers, methods can obscure original distribution. Grouping outliers single bin preserves overall distribution providing insight quantity.","code":"library(insurancerating) library(dplyr)  univariate(MTPL2,             x = area, # discrete risk factor            nclaims = nclaims, # number of claims            exposure = exposure,             premium = premium,             severity = amount) # loss ## # A tibble: 4 × 10 ##    area  amount nclaims exposure premium frequency average_severity risk_premium ##   <int>   <int>   <int>    <dbl>   <int>     <dbl>            <dbl>        <dbl> ## 1     2 4063270      98    819.    51896    0.120            41462.        4964. ## 2     3 7945311     113    765.    49337    0.148            70312.       10386. ## 3     1 6896187     146   1066.    65753    0.137            47234.        6471. ## 4     0    6922       1     13.3     902    0.0751            6922          520. ## # ℹ 2 more variables: loss_ratio <dbl>, average_premium <dbl> univariate(MTPL2, x = area, nclaims = nclaims, exposure = exposure) ## # A tibble: 4 × 4 ##    area nclaims exposure frequency ##   <int>   <int>    <dbl>     <dbl> ## 1     2      98    819.     0.120  ## 2     3     113    765.     0.148  ## 3     1     146   1066.     0.137  ## 4     0       1     13.3    0.0751 univariate(MTPL2, x = area, nclaims = nclaims, exposure = exposure) |>   autoplot() univariate(MTPL2, x = area, nclaims = nclaims, exposure = exposure) |>   autoplot(show_plots = c(6,1)) set.seed(1) sample_years <- sample(2016:2019, nrow(MTPL2), replace = TRUE)  MTPL2 |>   mutate(year = sample_years) |>   univariate(x = area, nclaims = nclaims, exposure = exposure, by = year) |>   autoplot(show_plots = 1) univariate(MTPL2, x = area, nclaims = nclaims, exposure = exposure) |>   autoplot(show_plots = c(6,1), background = FALSE) univariate(MTPL2, x = area, nclaims = nclaims, exposure = exposure) |>   autoplot(show_plots = 1, background = FALSE, sort = TRUE) univariate(MTPL2, x = area, nclaims = nclaims, exposure = exposure) |>   autoplot(show_plots = c(6,1), background = FALSE,             sort_manual = c(\"2\", \"3\", \"1\", \"0\")) univariate(MTPL2, x = area, nclaims = nclaims, exposure = exposure) |>   autoplot(show_plots = c(6,1), background = FALSE, sort = TRUE, ncol = 2,             color_bg = \"dodgerblue\", color = \"blue\",             custom_theme = ggplot2::theme_bw()) univariate(MTPL2, x = area, nclaims = nclaims) |>   autoplot(show_plots = 8, coord_flip = TRUE, sort = TRUE) histbin(MTPL2, premium, bins = 20) histbin(MTPL2, premium, bins = 10, right = 110)"},{"path":"https://mharinga.github.io/insurancerating/index.html","id":"continuous-variables","dir":"","previous_headings":"","what":"Continuous variables","title":"Analytic Insurance Rating Techniques","text":"section explains get understanding claim frequency claim severity continuous variables portfolio. example, ’ll use variable age_policyholder MTPL. , fit Generalized Additive Model (GAM) age_policyholder. GAM flexible regression model allows relationship predictors response variable nonlinear using smooth functions predictors. makes easier capture complex patterns data compared simpler models assume straight-line relationship. fit_gam() displays claim frequency (.e. number claims / exposure) different age groups:  figure shows younger policyholders higher risk profile. Since GAM uses exposure weights, fitted line 25 lower observed frequency due small number young policyholders. Similarly, low exposure policyholders aged 80 100 means GAM little influence group. insurance industry, GLMs (Generalized Linear Models) often used, non-linear relationships found GAMs must turned risk-homogeneous categories. goal group continuous risk factors categorical ones accurately reflect factors affect response. categories used levels risk factor GLM. two recommended ways , depending goal. first method bin GAM output using evolutionary trees, group policyholders risk-homogeneous categories based claim frequency. approach best bins used directly final tariff without refinement. method based Henckaerts et al. (2018); see ?construct_tariff_classes details. plan refine bins later, smoothing premium (reducing tolerance rate change), better manually select bins instead using evolutionary trees. second approach. methods described . construct_tariff_classes() generates bins using evolutionary trees:  clearly demonstrates bins risk-homogeneous categories. shows claim frequency policyholders aged 39 84 almost identical. 84, claim frequency slightly higher, young policyholders aged 18 25 highest claim frequency. groups aged 25 32 32 39 slightly lower claim frequencies youngest drivers represent higher risk main group policyholders aged 39 84. can follow steps severity specifying model = \"severity\" fit_gam(). final step add new columns MTPL data set translate age policyholders corresponding bin(s): biggest_reference() last line establishes baseline factors, specifically age_policyholder_freq_evt age_policyholder_freq_man, using one highest exposure. instance, age_policyholder_freq_evt, age group (39,84] selected baseline since highest exposure.","code":"age_policyholder_frequency <- fit_gam(data = MTPL,                                        nclaims = nclaims,                                        x = age_policyholder,                                        exposure = exposure,                                        model = \"frequency\")  # Create plot autoplot(age_policyholder_frequency, show_observations = TRUE) /   histbin(MTPL, age_policyholder, bins = 20) clusters_freq <- construct_tariff_classes(age_policyholder_frequency)  # Display plot autoplot(clusters_freq, show_observations = TRUE) # Create bins manually policyholder_manual_cat <- seq(18, 95, by = 4)  dat <- MTPL |>   mutate(age_policyholder_freq_evt = clusters_freq$tariff_classes) |>   mutate(age_policyholder_freq_man = cut(age_policyholder,                                           breaks = policyholder_manual_cat,                                           include.lowest = TRUE)) |>   mutate(across(where(is.character), as.factor)) |>   mutate(across(where(is.factor), ~biggest_reference(., exposure)))  glimpse(dat) ## Rows: 30,000 ## Columns: 9 ## $ age_policyholder          <int> 70, 40, 78, 49, 59, 71, 55, 52, 51, 47, 62, … ## $ nclaims                   <int> 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0,… ## $ exposure                  <dbl> 1.0000000, 1.0000000, 1.0000000, 1.0000000, … ## $ amount                    <dbl> 0, 0, 0, 0, 0, 0, 2607, 0, 0, 0, 0, 2890, 0,… ## $ power                     <int> 106, 74, 65, 64, 29, 66, 43, 55, 100, 66, 44… ## $ bm                        <int> 5, 3, 8, 10, 1, 6, 2, 2, 1, 2, 1, 2, 2, 9, 5… ## $ zip                       <fct> 1, 1, 2, 1, 3, 3, 3, 3, 3, 3, 2, 1, 1, 2, 2,… ## $ age_policyholder_freq_evt <fct> \"(39,84]\", \"(39,84]\", \"(39,84]\", \"(39,84]\", … ## $ age_policyholder_freq_man <fct> \"(66,70]\", \"(38,42]\", \"(74,78]\", \"(46,50]\", …"},{"path":"https://mharinga.github.io/insurancerating/index.html","id":"risk-premium-models","dir":"","previous_headings":"","what":"Risk premium models","title":"Analytic Insurance Rating Techniques","text":"final step create risk premium using GLMs (Generalized Linear Models). GLMs widely used insurance industry, claim frequencies typically modeled Poisson GLM claim severity Gamma GLM. GLMs favored allow modeling complex relationships predictors response variables accommodating various types response distributions. Poisson distribution particularly useful modeling count data, number claims, Gamma distribution effectively handles continuous, positive response variables like claim severity. utilizing models, insurers can accurately assess risk set appropriate premiums. insurancerating employs standard glm() function R facilitate process.","code":""},{"path":"https://mharinga.github.io/insurancerating/index.html","id":"example-1","dir":"","previous_headings":"Risk premium models","what":"Example 1","title":"Analytic Insurance Rating Techniques","text":"following code generates two different models claim frequency. fitted linear model coefficients different categories factor terms, usually one less total number categories. rating_factors() includes baseline factors coefficient 1: autoplot.riskfactor() generates figure coefficients. base level factor age_policyholder_freq_cat group highest exposure, displayed first.  figure displays age groups non-natural order, group aged 39 84 appearing group aged 18 25. arrange ages natural order, include model_data rating_factors() sort clustering original sequence. Please note ordering factor age_policyholder_freq_evt work biggest_reference() used set base level factor level highest exposure.  following graph presents additional options, example, including exposure displayed bar graph:","code":"mod_freq1 <- glm(nclaims ~ age_policyholder_freq_evt,                   offset = log(exposure),                   family = \"poisson\",                   data = dat)  mod_freq2 <- glm(nclaims ~ age_policyholder_freq_evt + age_policyholder,                   offset = log(exposure),                   family = \"poisson\",                   data = dat) rating_factors(mod_freq1, mod_freq2) ##                 risk_factor            level est_mod_freq1 est_mod_freq2 ## 1               (Intercept)      (Intercept)     0.1179256     0.2458900 ## 2 age_policyholder_freq_evt          (39,84]     1.0000000     1.0000000 ## 3 age_policyholder_freq_evt          [18,25]     2.2168483     1.4530987 ## 4 age_policyholder_freq_evt          (25,32]     1.5176253     1.0739519 ## 5 age_policyholder_freq_evt          (32,39]     1.2278612     0.9526827 ## 6 age_policyholder_freq_evt          (84,95]     0.5887492     0.9016893 ## 7          age_policyholder age_policyholder            NA     0.9867281 rating_factors(mod_freq1, mod_freq2) |>    autoplot() rating_factors(mod_freq1, mod_freq2, model_data = dat) |>   autoplot() rating_factors(mod_freq1, mod_freq2, model_data = dat, exposure = exposure) |>   autoplot(linetype = TRUE)"},{"path":"https://mharinga.github.io/insurancerating/index.html","id":"example-2","dir":"","previous_headings":"Risk premium models","what":"Example 2","title":"Analytic Insurance Rating Techniques","text":"basic example shows easily create premiums using insurancerating. Fit () Poisson GLM Gamma GLM: multiply get premium:","code":"mod_freq <- glm(nclaims ~ zip + age_policyholder_freq_man,                  offset = log(exposure),                  family = \"poisson\",                  data = dat)  mod_sev <- glm(amount ~ bm + zip,                 weights = nclaims,                 family = Gamma(link = \"log\"),                 data = dat |> filter(amount > 0)) MTPL_premium <- dat |>   add_prediction(mod_freq, mod_sev) |>   mutate(premium = pred_nclaims_mod_freq * pred_amount_mod_sev)   glimpse(MTPL_premium) ## Rows: 30,000 ## Columns: 12 ## $ age_policyholder          <int> 70, 40, 78, 49, 59, 71, 55, 52, 51, 47, 62, … ## $ nclaims                   <int> 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0,… ## $ exposure                  <dbl> 1.0000000, 1.0000000, 1.0000000, 1.0000000, … ## $ amount                    <dbl> 0, 0, 0, 0, 0, 0, 2607, 0, 0, 0, 0, 2890, 0,… ## $ power                     <int> 106, 74, 65, 64, 29, 66, 43, 55, 100, 66, 44… ## $ bm                        <int> 5, 3, 8, 10, 1, 6, 2, 2, 1, 2, 1, 2, 2, 9, 5… ## $ zip                       <fct> 1, 1, 2, 1, 3, 3, 3, 3, 3, 3, 2, 1, 1, 2, 2,… ## $ age_policyholder_freq_evt <fct> \"(39,84]\", \"(39,84]\", \"(39,84]\", \"(39,84]\", … ## $ age_policyholder_freq_man <fct> \"(66,70]\", \"(38,42]\", \"(74,78]\", \"(46,50]\", … ## $ pred_nclaims_mod_freq     <dbl> 0.10057828, 0.13484076, 0.08467235, 0.140216… ## $ pred_amount_mod_sev       <dbl> 92178.78, 85686.38, 82808.65, 110644.28, 624… ## $ premium                   <dbl> 9271.184, 11554.016, 7011.604, 15514.147, 62…"},{"path":"https://mharinga.github.io/insurancerating/index.html","id":"example-3","dir":"","previous_headings":"Risk premium models","what":"Example 3","title":"Analytic Insurance Rating Techniques","text":"previous example provided basic illustration determine premiums. example delves deeper process smoothing applying restrictions results. methods deduced article Third Party Motor Liability Ratemaking R, Spedicato, G. (2012). MTPL_premium dataset previous example used . restrictions applied frequency severity models, appropriate apply restrictions (smoothing) risk premium model. key idea smoothing used limit tolerance rate changes, rather changes claim frequency factors. achieve , start fitting burning model without restrictions: results following coefficients: table concise easy interpret, information can presented effectively graph, shown . visualization makes easier assess whether coefficients follow desired trend:  figure displays pattern similar GAM; however, reveals inconsistencies. example, premium ages 30 34 lower 34 38 age group, decreases 38 42 group. undesirable, particularly commercial perspective. address , smoothing can applied reduce tolerance rate changes create consistent premium structure. insurancerating offers smooth_coef() apply smoothing. smoothed estimates incorporated offset term model. offset simply fixed term added linear predictor, offset already present model, offset terms combined first (.e., offset=log()+log(b)=log(⋅b)\\text{offset} = \\log() + \\log(b) = \\log(\\cdot b)). simplest approach smooth_coef() fit polynomial, default setting: smooth_coef(), x_cut refers risk factor clusters, case, “age_policyholder_freq_man”. x_org represents original risk factor without clustering, “age_policyholder”. breaks parameter numerical vector specifying new age groups preferred commercial standpoint. autoplot() generates figure smoothed estimates. blue segments represent estimates unrestricted model, black line displays smoothed coefficients. red segments indicate newly estimated coefficients based polynomial selected age groups. age groups can chosen align commercial objectives:  illustrated , fitted polynomial yields excessively high coefficients age 25 significantly low coefficients individuals age 88, undesirable. degree can adjusted lower-order polynomial (case, set 1), resulting straight line, ideal:  cases, particularly situation, better alternative use GAM rather polynomial:  observed ages 80, fitted line decreases rapidly, despite little exposure age group. Therefore, GAM weighted exposure, resulting weighted GAM:  now observe pattern looks quite desirable (especially compared GAM second plot ). first plot, see ages 75, GAM starts increase , favorable context, claim frequency older drivers slightly higher. However, risk factors, vehicle power sum insured, wavy pattern ideal commercial perspective; may preferable risk factors demonstrate monotonic increase decrease. achieve , smooth_coef() offers options monotonic increasing (“mpi”) monotonic decreasing (“mpd”) trends. modeled using shape-constrained additive models (SCAMs).  addition smoothing, often need impose restrictions coefficients. instance, many insurers implement form Bonus-Malus System vehicle third-party liability insurance. restrict_coef() can used apply restrictions. restrict_coef(), restrictions must data frame first column contains names columns restrictions applied, second column lists corresponding restricted coefficients. following example demonstrates restrictions risk factor zip: examples illustrate use smooth_coef() restrict_coef(). two functions can combined, must always followed update_glm() refit GLM. ensures impact modified coefficients (resulting smooth_coef() restrict_coef()) taken account fitting coefficients. result, values coefficients affected smoothing restrictions may also adjusted refitting model. visualize :  prefer refit coefficients risk factors—exposure modified coefficients low—can apply manual changes refit intercept. , use update_glm(intercept_only = TRUE). apply manual changes refit intercept, ensuring changes impact variables. final step, incorporate refined premiums portfolio: Alternatively, can use model points, unique combinations factors (predictors) represent different groups policyholders:","code":"burn_unrestricted <- glm(premium ~ zip + bm + age_policyholder_freq_man,                           weights = exposure,                           family = Gamma(link = \"log\"),                           data = MTPL_premium) rating_factors(burn_unrestricted) ##                  risk_factor       level est_burn_unrestricted ## 1                (Intercept) (Intercept)          1.028917e+04 ## 2                        zip           1          1.000000e+00 ## 3                        zip           0          3.540444e-01 ## 4                        zip           2          7.300316e-01 ## 5                        zip           3          7.501146e-01 ## 6  age_policyholder_freq_man     (46,50]          1.000000e+00 ## 7  age_policyholder_freq_man     [18,22]          2.113100e+00 ## 8  age_policyholder_freq_man     (22,26]          1.709987e+00 ## 9  age_policyholder_freq_man     (26,30]          1.417552e+00 ## 10 age_policyholder_freq_man     (30,34]          1.065554e+00 ## 11 age_policyholder_freq_man     (34,38]          1.111333e+00 ## 12 age_policyholder_freq_man     (38,42]          9.547509e-01 ## 13 age_policyholder_freq_man     (42,46]          1.046178e+00 ## 14 age_policyholder_freq_man     (50,54]          9.131541e-01 ## 15 age_policyholder_freq_man     (54,58]          8.234561e-01 ## 16 age_policyholder_freq_man     (58,62]          7.545319e-01 ## 17 age_policyholder_freq_man     (62,66]          7.806560e-01 ## 18 age_policyholder_freq_man     (66,70]          7.276380e-01 ## 19 age_policyholder_freq_man     (70,74]          7.309279e-01 ## 20 age_policyholder_freq_man     (74,78]          6.846254e-01 ## 21 age_policyholder_freq_man     (78,82]          7.978962e-01 ## 22 age_policyholder_freq_man     (82,86]          1.093200e+00 ## 23 age_policyholder_freq_man     (86,90]          3.032743e-01 ## 24 age_policyholder_freq_man     (90,94]          3.763146e-05 ## 25                        bm          bm          1.037382e+00 rating_factors(burn_unrestricted, model_data = MTPL_premium, exposure = exposure) |>   autoplot(risk_factor = \"age_policyholder_freq_man\") burn_unrestricted |>   smooth_coef(x_cut = \"age_policyholder_freq_man\",                x_org = \"age_policyholder\",                breaks = seq(18, 99, 3)) |>   print() ## Formula: premium ~ zip + bm + offset(log(age_policyholder_freq_man_smooth)) burn_unrestricted |>   smooth_coef(x_cut = \"age_policyholder_freq_man\",                x_org = \"age_policyholder\",                breaks = seq(18, 93, 5)) |>   autoplot() burn_unrestricted |>   smooth_coef(x_cut = \"age_policyholder_freq_man\",                x_org = \"age_policyholder\",                degree = 1,               breaks = seq(18, 93, 5)) |>   autoplot() burn_unrestricted |>   smooth_coef(x_cut = \"age_policyholder_freq_man\",                x_org = \"age_policyholder\",                smoothing = \"gam\",               breaks = seq(18, 99, 3)) |>   autoplot() burn_unrestricted |>   smooth_coef(x_cut = \"age_policyholder_freq_man\",                x_org = \"age_policyholder\",                smoothing = \"gam\",               weights = \"exposure\",               breaks = seq(18, 99, 5)) |>   autoplot() / autoplot(age_policyholder_frequency, show_observations = TRUE) gam <- burn_unrestricted |>   smooth_coef(x_cut = \"age_policyholder_freq_man\",                x_org = \"age_policyholder\",                smoothing = \"gam\",               breaks = seq(18, 99, 3)) |>   autoplot()  mpd <- burn_unrestricted |>   smooth_coef(x_cut = \"age_policyholder_freq_man\",                x_org = \"age_policyholder\",                smoothing = \"mpd\",               breaks = seq(18, 99, 3)) |>   autoplot()  gam / mpd zip_df <- data.frame(zip = c(0,1,2,3),                      zip_restricted = c(0.8, 0.9, 1, 1.2))  burn_unrestricted |>   restrict_coef(restrictions = zip_df) |>   print() ## Formula: premium ~ bm + age_policyholder_freq_man + offset(log(zip_restricted)) burn_restricted3 <- burn_unrestricted |>   restrict_coef(restrictions = zip_df) |>   smooth_coef(x_cut = \"age_policyholder_freq_man\",                x_org = \"age_policyholder\",                smoothing = \"gam\",               weights = \"exposure\",               breaks = seq(18, 99, 3)) |>   update_glm()   # Show rating factors rating_factors(burn_restricted3) ##                risk_factor       level est_burn_restricted3 ## 1              (Intercept) (Intercept)         8820.9732105 ## 2           zip_restricted           0            0.8000000 ## 3           zip_restricted           1            0.9000000 ## 4           zip_restricted           2            1.0000000 ## 5           zip_restricted           3            1.2000000 ## 6  age_policyholder_smooth     [18,21]            2.0819663 ## 7  age_policyholder_smooth     (21,24]            1.8232383 ## 8  age_policyholder_smooth     (24,27]            1.5759076 ## 9  age_policyholder_smooth     (27,30]            1.3573220 ## 10 age_policyholder_smooth     (30,33]            1.1866671 ## 11 age_policyholder_smooth     (33,36]            1.0764527 ## 12 age_policyholder_smooth     (36,39]            1.0236651 ## 13 age_policyholder_smooth     (39,42]            1.0099824 ## 14 age_policyholder_smooth     (42,45]            1.0082040 ## 15 age_policyholder_smooth     (45,48]            0.9941858 ## 16 age_policyholder_smooth     (48,51]            0.9581483 ## 17 age_policyholder_smooth     (51,54]            0.9049206 ## 18 age_policyholder_smooth     (54,57]            0.8483375 ## 19 age_policyholder_smooth     (57,60]            0.8014044 ## 20 age_policyholder_smooth     (60,63]            0.7689384 ## 21 age_policyholder_smooth     (63,66]            0.7488122 ## 22 age_policyholder_smooth     (66,69]            0.7361431 ## 23 age_policyholder_smooth     (69,72]            0.7286809 ## 24 age_policyholder_smooth     (72,75]            0.7279182 ## 25 age_policyholder_smooth     (75,78]            0.7355715 ## 26 age_policyholder_smooth     (78,81]            0.7503285 ## 27 age_policyholder_smooth     (81,84]            0.7661830 ## 28 age_policyholder_smooth     (84,87]            0.7759663 ## 29 age_policyholder_smooth     (87,90]            0.7760689 ## 30 age_policyholder_smooth     (90,93]            0.7684741 ## 31 age_policyholder_smooth     (93,96]            0.7589957 ## 32 age_policyholder_smooth     (96,99]            0.7495117 ## 33                      bm          bm            1.0372396 # Show rating factors rating_factors(burn_restricted3) |> autoplot() premiums3 <- model_data(burn_restricted3) |>   add_prediction(burn_restricted3)  glimpse(premiums3) ## Rows: 30,000 ## Columns: 16 ## $ age_policyholder                 <int> 18, 18, 18, 18, 19, 19, 19, 19, 19, 1… ## $ age_policyholder_freq_man_smooth <dbl> 2.081966, 2.081966, 2.081966, 2.08196… ## $ age_policyholder_smooth          <chr> \"[18,21]\", \"[18,21]\", \"[18,21]\", \"[18… ## $ nclaims                          <int> 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1… ## $ exposure                         <dbl> 1.000000000, 0.095890411, 0.186301370… ## $ amount                           <dbl> 261777, 0, 0, 0, 0, 6642, 0, 57540, 0… ## $ power                            <int> 40, 68, 37, 33, 47, 68, 110, 74, 55, … ## $ bm                               <int> 3, 5, 3, 1, 6, 1, 1, 2, 2, 2, 5, 4, 2… ## $ zip                              <fct> 3, 2, 2, 2, 3, 3, 1, 3, 3, 2, 1, 3, 2… ## $ age_policyholder_freq_evt        <fct> \"[18,25]\", \"[18,25]\", \"[18,25]\", \"[18… ## $ age_policyholder_freq_man        <fct> \"[18,22]\", \"[18,22]\", \"[18,22]\", \"[18… ## $ pred_nclaims_mod_freq            <dbl> 0.28908717, 0.02621662, 0.05093515, 0… ## $ pred_amount_mod_sev              <dbl> 67176.26, 74215.89, 68988.66, 64129.6… ## $ premium                          <dbl> 19419.7940, 1945.6898, 3513.9476, 331… ## $ zip_restricted                   <dbl> 1.2, 1.0, 1.0, 1.0, 1.2, 1.2, 0.9, 1.… ## $ pred_premium_burn_restricted3    <dbl> 24592.84, 22048.83, 20494.03, 19048.8… premiums4 <- model_data(burn_restricted3) |>   construct_model_points() |>   add_prediction(burn_restricted3)  glimpse(premiums4) ## Rows: 2,392 ## Columns: 8 ## $ age_policyholder_smooth          <chr> \"(21,24]\", \"(21,24]\", \"(21,24]\", \"(21… ## $ zip                              <fct> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1… ## $ bm                               <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12… ## $ zip_restricted                   <dbl> 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.… ## $ age_policyholder_freq_man_smooth <dbl> 1.823238, 1.823238, 1.823238, 1.82323… ## $ count                            <int> 142, 53, 13, 10, 16, 25, 14, 9, 10, 1… ## $ exposure                         <dbl> 118.427397, 43.178082, 12.410959, 8.1… ## $ pred_premium_burn_restricted3    <dbl> 15013.49, 15572.58, 16152.50, 16754.0…"},{"path":"https://mharinga.github.io/insurancerating/index.html","id":"example-4","dir":"","previous_headings":"Risk premium models","what":"Example 4","title":"Analytic Insurance Rating Techniques","text":"last example illustrates additional options model validation performance evaluation. methods presented random order use models previous examples. model_performance() computes indices model performance GLMs: RMSE (Root Mean Square Error) square root average squared differences predicted actual observations, reflecting well model fits data. can interpreted standard deviation unexplained variance expressed units response variable. bootstrap_rmse() computes RMSE bootstrap replicates, conducting process times. Specifically, iteration, sample drawn replacement dataset, model refitted using sample. root mean squared error calculated. following visualizes :  analysis useful assessing stability fitted model’s predictive ability examining variation computed RMSE. claim severity models, can particularly beneficial evaluate RMSE variation portfolio includes large claim sizes. important check variation stable model consistent coefficients desired; coefficients change significantly data varies slightly. figure illustrates RMSE variation frequency model quite low, expected. dashed line represents RMSE original fitted model, lines indicate 95% confidence interval. check_overdispersion() calculates dispersion ratio Poisson GLM. dispersion ratio greater one suggests overdispersion, occurs observed variance exceeds variance predicted theoretical model. dispersion ratio close one, indicates Poisson model fits data well. pp-value less .05 also suggests overdispersion. dispersion ratio greater 2, may indicate significant issue data, advisable check outliers . check_residuals() calculates standardized residuals GLMs, scaling 0 1, making easier interpret, similar residuals linear models:  check_residuals() helps identify deviations expected distribution generates uniform quantile-quantile (QQ) plot. simulated residuals QQ plot show significant deviation Poisson distribution. Keep mind formal tests residual distribution usually yield significant results, visual inspections like QQ plots preferred. Diagnosing issues GLMs challenging standard residual plots often don’t work well. due expected data distribution changing fitted values, can make seem like issues like non-normality heteroscedasticity, even model correct. address , check_residuals() uses simulation-based approach create standardized residuals can intuitively understood. explanation adopted vignette DHARMa.","code":"model_performance(mod_freq1, mod_freq2) ## [34m# Comparison of Model Performance Indices ##  ## [39mModel     |      AIC |      BIC | RMSE ## -------------------------------------- ## mod_freq1 | 22983.34 | 23024.88 | 0.36 ## mod_freq2 | 22943.06 | 22992.92 | 0.36 bootstrap_rmse(mod_freq1, dat, n = 100, show_progress = FALSE) |>    autoplot() check_overdispersion(mod_freq1) ##        dispersion ratio =     1.185 ##   Pearson's Chi-Squared = 35554.163 ##                 p-value =   < 0.001  ## Overdispersion detected. check_residuals(mod_freq1, n_simulations = 600) |>   autoplot() ## [32mOK: residuals appear as from the expected distribution (p = 0.271).[39m"},{"path":"https://mharinga.github.io/insurancerating/reference/MTPL.html","id":null,"dir":"Reference","previous_headings":"","what":"Characteristics of 30,000 policyholders in a Motor Third Party Liability (MTPL) portfolio. — MTPL","title":"Characteristics of 30,000 policyholders in a Motor Third Party Liability (MTPL) portfolio. — MTPL","text":"dataset containing age, number claims, exposure, claim amount, power, bm, region 30,000 policyholders.","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/MTPL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Characteristics of 30,000 policyholders in a Motor Third Party Liability (MTPL) portfolio. — MTPL","text":"","code":"MTPL"},{"path":"https://mharinga.github.io/insurancerating/reference/MTPL.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Characteristics of 30,000 policyholders in a Motor Third Party Liability (MTPL) portfolio. — MTPL","text":"data frame 30,000 rows 7 variables: age_policyholder age policyholder, years. nclaims number claims. exposure exposure, example, vehicle insured July 1 certain year, year, represent exposure 0.5 insurance company. amount claim amount Euros. power engine power vehicle (kilowatts). bm level occupied 23-level (0-22) bonus-malus scale (higher level occupied, worse claim history). zip region indicator (0-3).","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/MTPL.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Characteristics of 30,000 policyholders in a Motor Third Party Liability (MTPL) portfolio. — MTPL","text":"data derived portfolio large Dutch motor insurance company.","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/MTPL.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Characteristics of 30,000 policyholders in a Motor Third Party Liability (MTPL) portfolio. — MTPL","text":"Martin Haringa","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/MTPL2.html","id":null,"dir":"Reference","previous_headings":"","what":"Characteristics of 3,000 policyholders in a Motor Third Party Liability (MTPL) portfolio. — MTPL2","title":"Characteristics of 3,000 policyholders in a Motor Third Party Liability (MTPL) portfolio. — MTPL2","text":"dataset containing area, number claims, exposure, claim amount, exposure, premium 3,000 policyholders","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/MTPL2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Characteristics of 3,000 policyholders in a Motor Third Party Liability (MTPL) portfolio. — MTPL2","text":"","code":"MTPL2"},{"path":"https://mharinga.github.io/insurancerating/reference/MTPL2.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Characteristics of 3,000 policyholders in a Motor Third Party Liability (MTPL) portfolio. — MTPL2","text":"data frame 3,000 rows 6 variables: customer_id customer id area region customer lives (0-3) nclaims number claims amount claim amount (severity) exposure exposure premium earned premium","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/MTPL2.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Characteristics of 3,000 policyholders in a Motor Third Party Liability (MTPL) portfolio. — MTPL2","text":"data derived portfolio large Dutch motor insurance company.","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/MTPL2.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Characteristics of 3,000 policyholders in a Motor Third Party Liability (MTPL) portfolio. — MTPL2","text":"Martin Haringa","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/add_prediction.html","id":null,"dir":"Reference","previous_headings":"","what":"Add predictions to a data frame — add_prediction","title":"Add predictions to a data frame — add_prediction","text":"Add model predictions confidence bounds data frame.","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/add_prediction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add predictions to a data frame — add_prediction","text":"","code":"add_prediction(data, ..., var = NULL, conf_int = FALSE, alpha = 0.1)"},{"path":"https://mharinga.github.io/insurancerating/reference/add_prediction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add predictions to a data frame — add_prediction","text":"data data frame new data. ... one objects class glm. var name output column(s), defaults NULL conf_int determines whether confidence intervals shown. Defaults conf_int = FALSE. alpha real number 0 1. Controls confidence level interval estimates (defaults 0.10, representing 90 percent confidence interval).","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/add_prediction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add predictions to a data frame — add_prediction","text":"data.frame","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/add_prediction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add predictions to a data frame — add_prediction","text":"","code":"mod1 <- glm(nclaims ~ age_policyholder, data = MTPL,     offset = log(exposure), family = poisson()) mtpl_pred <- add_prediction(MTPL, mod1)  # Include confidence bounds mtpl_pred_ci <- add_prediction(MTPL, mod1, conf_int = TRUE)"},{"path":"https://mharinga.github.io/insurancerating/reference/autoplot.bootstrap_rmse.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatically create a ggplot for objects obtained from bootstrap_rmse() — autoplot.bootstrap_rmse","title":"Automatically create a ggplot for objects obtained from bootstrap_rmse() — autoplot.bootstrap_rmse","text":"Takes object produced bootstrap_rmse(), plots simulated RMSE","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/autoplot.bootstrap_rmse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatically create a ggplot for objects obtained from bootstrap_rmse() — autoplot.bootstrap_rmse","text":"","code":"# S3 method for class 'bootstrap_rmse' autoplot(object, fill = NULL, color = NULL, ...)"},{"path":"https://mharinga.github.io/insurancerating/reference/autoplot.bootstrap_rmse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatically create a ggplot for objects obtained from bootstrap_rmse() — autoplot.bootstrap_rmse","text":"object bootstrap_rmse object produced bootstrap_rmse() fill color fill histogram (default \"steelblue\") color color plot line colors histogram ... plotting parameters affect plot","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/autoplot.bootstrap_rmse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatically create a ggplot for objects obtained from bootstrap_rmse() — autoplot.bootstrap_rmse","text":"ggplot object","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/autoplot.bootstrap_rmse.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Automatically create a ggplot for objects obtained from bootstrap_rmse() — autoplot.bootstrap_rmse","text":"Martin Haringa","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/autoplot.check_residuals.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatically create a ggplot for objects obtained from check_residuals() — autoplot.check_residuals","title":"Automatically create a ggplot for objects obtained from check_residuals() — autoplot.check_residuals","text":"Takes object produced check_residuals(), produces uniform quantile-quantile plot.#'","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/autoplot.check_residuals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatically create a ggplot for objects obtained from check_residuals() — autoplot.check_residuals","text":"","code":"# S3 method for class 'check_residuals' autoplot(object, show_message = TRUE, ...)"},{"path":"https://mharinga.github.io/insurancerating/reference/autoplot.check_residuals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatically create a ggplot for objects obtained from check_residuals() — autoplot.check_residuals","text":"object check_residuals object produced check_residuals() show_message show output test (defaults TRUE) ... plotting parameters affect plot","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/autoplot.check_residuals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatically create a ggplot for objects obtained from check_residuals() — autoplot.check_residuals","text":"ggplot object","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/autoplot.check_residuals.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Automatically create a ggplot for objects obtained from check_residuals() — autoplot.check_residuals","text":"Martin Haringa","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/autoplot.constructtariffclasses.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatically create a ggplot for objects obtained from construct_tariff_classes() — autoplot.constructtariffclasses","title":"Automatically create a ggplot for objects obtained from construct_tariff_classes() — autoplot.constructtariffclasses","text":"Takes object produced construct_tariff_classes(), plots fitted GAM. addition constructed tariff classes shown.","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/autoplot.constructtariffclasses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatically create a ggplot for objects obtained from construct_tariff_classes() — autoplot.constructtariffclasses","text":"","code":"# S3 method for class 'constructtariffclasses' autoplot(   object,   conf_int = FALSE,   color_gam = \"steelblue\",   show_observations = FALSE,   color_splits = \"grey50\",   size_points = 1,   color_points = \"black\",   rotate_labels = FALSE,   remove_outliers = NULL,   ... )"},{"path":"https://mharinga.github.io/insurancerating/reference/autoplot.constructtariffclasses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatically create a ggplot for objects obtained from construct_tariff_classes() — autoplot.constructtariffclasses","text":"object constructtariffclasses object produced construct_tariff_classes conf_int determines whether 95\\ default conf_int = FALSE color_gam color can specified either name (e.g.: \"red\") hexadecimal code (e.g. : \"#FF1234\") (default \"steelblue\") show_observations add observed frequency/severity points level variable tariff classes constructed color_splits change color splits graph (\"grey50\" default) size_points size points (1 default) color_points change color points graph (\"black\" default) rotate_labels rotate x-labels 45 degrees (might helpful overlapping x-labels) remove_outliers show observations number plot. might helpful outliers. ... plotting parameters affect plot","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/autoplot.constructtariffclasses.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatically create a ggplot for objects obtained from construct_tariff_classes() — autoplot.constructtariffclasses","text":"ggplot object","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/autoplot.constructtariffclasses.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Automatically create a ggplot for objects obtained from construct_tariff_classes() — autoplot.constructtariffclasses","text":"Martin Haringa","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/autoplot.constructtariffclasses.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automatically create a ggplot for objects obtained from construct_tariff_classes() — autoplot.constructtariffclasses","text":"","code":"if (FALSE) { # \\dontrun{ library(ggplot2) library(dplyr) x <- fit_gam(MTPL, nclaims = nclaims, x = age_policyholder, exposure = exposure) |>    construct_tariff_classes() autoplot(x, show_observations = TRUE) } # }"},{"path":"https://mharinga.github.io/insurancerating/reference/autoplot.fitgam.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatically create a ggplot for objects obtained from fit_gam() — autoplot.fitgam","title":"Automatically create a ggplot for objects obtained from fit_gam() — autoplot.fitgam","text":"Takes object produced fit_gam(), plots fitted GAM.","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/autoplot.fitgam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatically create a ggplot for objects obtained from fit_gam() — autoplot.fitgam","text":"","code":"# S3 method for class 'fitgam' autoplot(   object,   conf_int = FALSE,   color_gam = \"steelblue\",   show_observations = FALSE,   x_stepsize = NULL,   size_points = 1,   color_points = \"black\",   rotate_labels = FALSE,   remove_outliers = NULL,   ... )"},{"path":"https://mharinga.github.io/insurancerating/reference/autoplot.fitgam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatically create a ggplot for objects obtained from fit_gam() — autoplot.fitgam","text":"object fitgam object produced fit_gam() conf_int determines whether 95 percent confidence intervals plotted. default conf_int = FALSE. color_gam color can specified either name (e.g.: \"red\") hexadecimal code (e.g. : \"#FF1234\") (default \"steelblue\") show_observations add observed frequency/severity points level variable tariff classes constructed x_stepsize set step size labels horizontal axis size_points size points (1 default) color_points change color points graph (\"black\" default) rotate_labels rotate x-labels 45 degrees (might helpful overlapping x-labels) remove_outliers show observations number plot. might helpful outliers. ... plotting parameters affect plot","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/autoplot.fitgam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatically create a ggplot for objects obtained from fit_gam() — autoplot.fitgam","text":"ggplot object","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/autoplot.fitgam.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Automatically create a ggplot for objects obtained from fit_gam() — autoplot.fitgam","text":"Martin Haringa","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/autoplot.fitgam.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automatically create a ggplot for objects obtained from fit_gam() — autoplot.fitgam","text":"","code":"if (FALSE) { # \\dontrun{ library(ggplot2) library(dplyr) fit_gam(MTPL, nclaims = nclaims, x = age_policyholder,         exposure = exposure) |>    autoplot(show_observations = TRUE) } # }"},{"path":"https://mharinga.github.io/insurancerating/reference/autoplot.restricted.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatically create a ggplot for objects obtained from restrict_coef() — autoplot.restricted","title":"Automatically create a ggplot for objects obtained from restrict_coef() — autoplot.restricted","text":"Takes object produced restrict_coef(), produces line plot comparison restricted coefficients estimated coefficients obtained model.","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/autoplot.restricted.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatically create a ggplot for objects obtained from restrict_coef() — autoplot.restricted","text":"","code":"# S3 method for class 'restricted' autoplot(object, ...)"},{"path":"https://mharinga.github.io/insurancerating/reference/autoplot.restricted.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatically create a ggplot for objects obtained from restrict_coef() — autoplot.restricted","text":"object object produced restrict_coef() ... plotting parameters affect plot","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/autoplot.restricted.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatically create a ggplot for objects obtained from restrict_coef() — autoplot.restricted","text":"Object class ggplot2","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/autoplot.restricted.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Automatically create a ggplot for objects obtained from restrict_coef() — autoplot.restricted","text":"Martin Haringa","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/autoplot.restricted.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automatically create a ggplot for objects obtained from restrict_coef() — autoplot.restricted","text":"","code":"freq <- glm(nclaims ~ bm + zip, weights = power, family = poisson(),  data = MTPL) zip_df <- data.frame(zip = c(0,1,2,3), zip_rst = c(0.8, 0.9, 1, 1.2)) freq |>   restrict_coef(restrictions = zip_df) |>   autoplot()"},{"path":"https://mharinga.github.io/insurancerating/reference/autoplot.riskfactor.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatically create a ggplot for objects obtained from rating_factors() — autoplot.riskfactor","title":"Automatically create a ggplot for objects obtained from rating_factors() — autoplot.riskfactor","text":"Takes object produced rating_factors(), plots available input.","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/autoplot.riskfactor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatically create a ggplot for objects obtained from rating_factors() — autoplot.riskfactor","text":"","code":"# S3 method for class 'riskfactor' autoplot(   object,   risk_factors = NULL,   ncol = 1,   labels = TRUE,   dec.mark = \",\",   ylab = \"rate\",   fill = NULL,   color = NULL,   linetype = FALSE,   ... )"},{"path":"https://mharinga.github.io/insurancerating/reference/autoplot.riskfactor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatically create a ggplot for objects obtained from rating_factors() — autoplot.riskfactor","text":"object riskfactor object produced rating_factors() risk_factors character vector define factors included. Defaults risk factors. ncol number columns output (default 1) labels show labels exposure (default TRUE) dec.mark control format decimal point, well mark intervals decimal point, choose either \",\" (default) \".\" ylab modify label y-axis fill color fill histogram color color plot line colors histogram (default \"skyblue\") linetype use different linetypes (default FALSE) ... plotting parameters affect plot","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/autoplot.riskfactor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatically create a ggplot for objects obtained from rating_factors() — autoplot.riskfactor","text":"ggplot2 object","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/autoplot.riskfactor.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Automatically create a ggplot for objects obtained from rating_factors() — autoplot.riskfactor","text":"Martin Haringa","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/autoplot.riskfactor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automatically create a ggplot for objects obtained from rating_factors() — autoplot.riskfactor","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union df <- MTPL2 |>   mutate(across(c(area), as.factor)) |>   mutate(across(c(area), ~biggest_reference(., exposure)))  mod1 <- glm(nclaims ~ area + premium, offset = log(exposure),  family = poisson(), data = df) mod2 <- glm(nclaims ~ area, offset = log(exposure), family = poisson(),  data = df)  x <- rating_factors(mod1, mod2, model_data = df, exposure = exposure) autoplot(x)"},{"path":"https://mharinga.github.io/insurancerating/reference/autoplot.smooth.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatically create a ggplot for objects obtained from smooth_coef() — autoplot.smooth","title":"Automatically create a ggplot for objects obtained from smooth_coef() — autoplot.smooth","text":"Takes object produced smooth_coef(), produces plot comparison smoothed coefficients estimated coefficients obtained model.","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/autoplot.smooth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatically create a ggplot for objects obtained from smooth_coef() — autoplot.smooth","text":"","code":"# S3 method for class 'smooth' autoplot(object, ...)"},{"path":"https://mharinga.github.io/insurancerating/reference/autoplot.smooth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatically create a ggplot for objects obtained from smooth_coef() — autoplot.smooth","text":"object object produced smooth_coef() ... plotting parameters affect plot","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/autoplot.smooth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatically create a ggplot for objects obtained from smooth_coef() — autoplot.smooth","text":"Object class ggplot2","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/autoplot.smooth.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Automatically create a ggplot for objects obtained from smooth_coef() — autoplot.smooth","text":"Martin Haringa","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/autoplot.truncated_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatically create a ggplot for objects obtained from fit_truncated_dist() — autoplot.truncated_dist","title":"Automatically create a ggplot for objects obtained from fit_truncated_dist() — autoplot.truncated_dist","text":"Takes object produced fit_truncated_dist(), plots available input.","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/autoplot.truncated_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatically create a ggplot for objects obtained from fit_truncated_dist() — autoplot.truncated_dist","text":"","code":"# S3 method for class 'truncated_dist' autoplot(   object,   geom_ecdf = c(\"point\", \"step\"),   xlab = NULL,   ylab = NULL,   ylim = c(0, 1),   xlim = NULL,   print_title = TRUE,   print_dig = 2,   print_trunc = 2,   ... )"},{"path":"https://mharinga.github.io/insurancerating/reference/autoplot.truncated_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatically create a ggplot for objects obtained from fit_truncated_dist() — autoplot.truncated_dist","text":"object object univariate object produced fit_truncated_dist() geom_ecdf geometric object use display data (point step) xlab title x axis ylab title y axis ylim two numeric values, specifying lower limit upper limit scale xlim two numeric values, specifying left limit right limit scale print_title show title (default TRUE) print_dig number digits parameters title (default 2) print_trunc number digits truncation values print ... plotting parameters affect plot","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/autoplot.truncated_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatically create a ggplot for objects obtained from fit_truncated_dist() — autoplot.truncated_dist","text":"ggplot2 object","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/autoplot.truncated_dist.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Automatically create a ggplot for objects obtained from fit_truncated_dist() — autoplot.truncated_dist","text":"Martin Haringa","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/autoplot.univariate.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatically create a ggplot for objects obtained from univariate() — autoplot.univariate","title":"Automatically create a ggplot for objects obtained from univariate() — autoplot.univariate","text":"Takes object produced univariate(), plots available input.","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/autoplot.univariate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatically create a ggplot for objects obtained from univariate() — autoplot.univariate","text":"","code":"# S3 method for class 'univariate' autoplot(   object,   show_plots = 1:9,   ncol = 1,   background = TRUE,   labels = TRUE,   sort = FALSE,   sort_manual = NULL,   dec.mark = \",\",   color = \"dodgerblue\",   color_bg = \"lightskyblue\",   label_width = 10,   coord_flip = FALSE,   show_total = FALSE,   total_color = NULL,   total_name = NULL,   rotate_angle = NULL,   custom_theme = NULL,   remove_underscores = FALSE,   ... )"},{"path":"https://mharinga.github.io/insurancerating/reference/autoplot.univariate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatically create a ggplot for objects obtained from univariate() — autoplot.univariate","text":"object univariate object produced univariate() show_plots numeric vector plots shown (default c(1,2,3,4,5,6,7,8,9)), nine available plots: 1. frequency (.e. number claims / exposure) 2. average severity (.e. severity / number claims) 3. risk premium (.e. severity / exposure) 4. loss ratio (.e. severity / premium) 5. average premium (.e. premium / exposure) 6. exposure 7. severity 8. nclaims 9. premium ncol number columns output (default 1) background show exposure background histogram (default TRUE) labels show labels exposure (default TRUE) sort sort (order) risk factor descending order exposure (default FALSE) sort_manual sort (order) risk factor ordering; character vector (default NULL) dec.mark decimal mark; defaults \",\" color change color points line (\"dodgerblue\" default) color_bg change color histogram (\"#f8e6b1\" default) label_width width labels x-axis (10 default) coord_flip flip cartesian coordinates horizontal becomes vertical, vertical, horizontal (default FALSE) show_total show line total used univariate (default FALSE) total_color change color total line (\"black\" default) total_name add legend name total line (e.g. \"total\") rotate_angle numeric value angle labels x-axis (degrees) custom_theme list customized theme options remove_underscores logical. Defaults FALSE. Remove underscores labels ... plotting parameters affect plot","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/autoplot.univariate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatically create a ggplot for objects obtained from univariate() — autoplot.univariate","text":"ggplot2 object","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/autoplot.univariate.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Automatically create a ggplot for objects obtained from univariate() — autoplot.univariate","text":"Marc Haine, Martin Haringa","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/autoplot.univariate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automatically create a ggplot for objects obtained from univariate() — autoplot.univariate","text":"","code":"library(ggplot2) x <- univariate(MTPL2, x = area, severity = amount, nclaims = nclaims, exposure = exposure) autoplot(x) #> Ignoring plots 4, 5, 9: input is unknown  autoplot(x, show_plots = c(6,1), background = FALSE, sort = TRUE)   # Group by `zip` xzip <- univariate(MTPL, x = bm, severity = amount, nclaims = nclaims, exposure = exposure, by = zip) autoplot(xzip, show_plots = 1:2) #> Warning: Removed 16 rows containing missing values or values outside the scale range #> (`geom_point()`). #> Warning: Removed 5 rows containing missing values or values outside the scale range #> (`geom_line()`)."},{"path":"https://mharinga.github.io/insurancerating/reference/biggest_reference.html","id":null,"dir":"Reference","previous_headings":"","what":"Set reference group to the group with largest exposure — biggest_reference","title":"Set reference group to the group with largest exposure — biggest_reference","text":"function specifies first level factor level largest exposure. Levels factors sorted using alphabetic ordering. factor used regression context, first level reference. insurance applications common specify reference level level largest exposure.","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/biggest_reference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set reference group to the group with largest exposure — biggest_reference","text":"","code":"biggest_reference(x, weight)"},{"path":"https://mharinga.github.io/insurancerating/reference/biggest_reference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set reference group to the group with largest exposure — biggest_reference","text":"x unordered factor weight vector containing weights (e.g. exposure). numeric.","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/biggest_reference.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set reference group to the group with largest exposure — biggest_reference","text":"factor length x","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/biggest_reference.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Set reference group to the group with largest exposure — biggest_reference","text":"Kaas, Rob & Goovaerts, Marc & Dhaene, Jan & Denuit, Michel. (2008). Modern Actuarial Risk Theory: Using R. doi:10.1007/978-3-540-70998-5.","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/biggest_reference.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Set reference group to the group with largest exposure — biggest_reference","text":"Martin Haringa","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/biggest_reference.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set reference group to the group with largest exposure — biggest_reference","text":"","code":"if (FALSE) { # \\dontrun{ library(dplyr) df <- chickwts |> mutate(across(where(is.character), as.factor)) |> mutate(across(where(is.factor), ~biggest_reference(., weight))) } # }"},{"path":"https://mharinga.github.io/insurancerating/reference/bootstrap_rmse.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrapped RMSE — bootstrap_rmse","title":"Bootstrapped RMSE — bootstrap_rmse","text":"Generate n bootstrap replicates compute n root mean squared errors.","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/bootstrap_rmse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrapped RMSE — bootstrap_rmse","text":"","code":"bootstrap_rmse(   model,   data,   n = 50,   frac = 1,   show_progress = TRUE,   rmse_model = NULL )"},{"path":"https://mharinga.github.io/insurancerating/reference/bootstrap_rmse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrapped RMSE — bootstrap_rmse","text":"model model object data data used fit model object n number bootstrap replicates (defaults 50) frac fraction used training set cross-validation applied (defaults 1) show_progress show progress bar (defaults TRUE) rmse_model numeric RMSE show vertical dashed line autoplot() (defaults NULL)","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/bootstrap_rmse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrapped RMSE — bootstrap_rmse","text":"list components rmse_bs numerical vector n root mean squared errors rmse_mod root mean squared error fitted (.e. original) model","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/bootstrap_rmse.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bootstrapped RMSE — bootstrap_rmse","text":"test predictive ability fitted model might helpful determine variation computed RMSE. variation calculated computing root mean squared errors n generated bootstrap replicates. precisely, iteration sample replacement taken data set model refitted using sample. , root mean squared error calculated.","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/bootstrap_rmse.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bootstrapped RMSE — bootstrap_rmse","text":"Martin Haringa","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/bootstrap_rmse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootstrapped RMSE — bootstrap_rmse","text":"","code":"if (FALSE) { # \\dontrun{ mod1 <- glm(nclaims ~ age_policyholder, data = MTPL,     offset = log(exposure), family = poisson())  # Use all records in MTPL x <- bootstrap_rmse(mod1, MTPL, n = 80, show_progress = FALSE) print(x) autoplot(x)  # Use 80% of records to test whether predictive ability depends on which 80% # is used. This might for example be useful in case portfolio contains large # claim sizes x_frac <- bootstrap_rmse(mod1, MTPL, n = 50, frac = .8,  show_progress = FALSE) autoplot(x_frac) # Variation is quite small for Poisson GLM } # }"},{"path":"https://mharinga.github.io/insurancerating/reference/check_overdispersion.html","id":null,"dir":"Reference","previous_headings":"","what":"Check overdispersion of Poisson GLM — check_overdispersion","title":"Check overdispersion of Poisson GLM — check_overdispersion","text":"Check Poisson GLM overdispersion.","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/check_overdispersion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check overdispersion of Poisson GLM — check_overdispersion","text":"","code":"check_overdispersion(object)"},{"path":"https://mharinga.github.io/insurancerating/reference/check_overdispersion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check overdispersion of Poisson GLM — check_overdispersion","text":"object fitted model class glm family Poisson","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/check_overdispersion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check overdispersion of Poisson GLM — check_overdispersion","text":"list dispersion ratio, chi-squared statistic, p-value.","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/check_overdispersion.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check overdispersion of Poisson GLM — check_overdispersion","text":"dispersion ratio larger one indicates overdispersion, occurs observed variance higher variance theoretical model. dispersion ratio close one, Poisson model fits well data. p-value < .05 indicates overdispersion. Overdispersion > 2 probably means larger problem data: check () outliers, obvious lack fit. Adopted performance::check_overdispersion().","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/check_overdispersion.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Check overdispersion of Poisson GLM — check_overdispersion","text":"Bolker B et al. (2017): GLMM FAQ.","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/check_overdispersion.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check overdispersion of Poisson GLM — check_overdispersion","text":"Martin Haringa","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/check_overdispersion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check overdispersion of Poisson GLM — check_overdispersion","text":"","code":"x <- glm(nclaims ~ area, offset = log(exposure), family = poisson(),   data = MTPL2) check_overdispersion(x) #>        dispersion ratio =    1.229 #>   Pearson's Chi-Squared = 3684.679 #>                 p-value =  < 0.001 #>  #> Overdispersion detected."},{"path":"https://mharinga.github.io/insurancerating/reference/check_residuals.html","id":null,"dir":"Reference","previous_headings":"","what":"Check model residuals — check_residuals","title":"Check model residuals — check_residuals","text":"Detect overall deviations expected distribution.","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/check_residuals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check model residuals — check_residuals","text":"","code":"check_residuals(object, n_simulations = 30)"},{"path":"https://mharinga.github.io/insurancerating/reference/check_residuals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check model residuals — check_residuals","text":"object model object n_simulations number simulations (defaults 30)","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/check_residuals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check model residuals — check_residuals","text":"Invisibly returns p-value test statistics. p-value < 0.05 indicates significant deviation expected distribution.","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/check_residuals.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check model residuals — check_residuals","text":"Misspecifications GLMs reliably diagnosed standard residual plots, GLMs thus often thoroughly checked LMs. One reason GLMs residuals harder interpret expected distribution data changes fitted values. result, standard residual plots, interpreted way linear models, seem show kind problems, non-normality, heteroscedasticity, even model correctly specified. check_residuals() aims solving problems creating readily interpretable residuals GLMs standardized values 0 1, can interpreted intuitively residuals linear model. achieved simulation-based approach, similar Bayesian p-value parametric bootstrap, transforms residuals standardized scale. explanation adopted DHARMa::simulateResiduals(). might happen fitted model data point simulations value (e.g. zero), returns error message Error approxfun: need least two non-NA values interpolate*. case, help increase number simulations.","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/check_residuals.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Check model residuals — check_residuals","text":"Dunn, K. P., Smyth, G. K. (1996). Randomized quantile residuals. Journal Computational Graphical Statistics 5, 1-10. Gelman, . & Hill, J. Data analysis using regression multilevel/hierarchical models Cambridge University Press, 2006 Hartig, F. (2020). DHARMa: Residual Diagnostics Hierarchical (Multi-Level / Mixed) Regression Models. R package version 0.3.0. https://CRAN.R-project.org/package=DHARMa","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/check_residuals.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check model residuals — check_residuals","text":"Martin Haringa","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/check_residuals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check model residuals — check_residuals","text":"","code":"if (FALSE) { # \\dontrun{ m1 <- glm(nclaims ~ area, offset = log(exposure), family = poisson(), data = MTPL2) check_residuals(m1, n_simulations = 50) |> autoplot() } # }"},{"path":"https://mharinga.github.io/insurancerating/reference/construct_model_points.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct model points from Generalized Linear Model — construct_model_points","title":"Construct model points from Generalized Linear Model — construct_model_points","text":"construct_model_points() used construct model points generalized linear models, must preceded model_data(). construct_model_points() can also used combination data.frame.","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/construct_model_points.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct model points from Generalized Linear Model — construct_model_points","text":"","code":"construct_model_points(   x,   exposure = NULL,   exposure_by = NULL,   agg_cols = NULL,   drop_na = FALSE )"},{"path":"https://mharinga.github.io/insurancerating/reference/construct_model_points.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct model points from Generalized Linear Model — construct_model_points","text":"x Object class model_data class data.frame exposure column exposure exposure_by split column exposure (e.g. year) agg_cols list columns aggregate (sum) , e.g. number claims drop_na drop na values (default FALSE)","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/construct_model_points.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct model points from Generalized Linear Model — construct_model_points","text":"data.frame","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/construct_model_points.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Construct model points from Generalized Linear Model — construct_model_points","text":"Martin Haringa","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/construct_model_points.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct model points from Generalized Linear Model — construct_model_points","text":"","code":"if (FALSE) { # \\dontrun{ # With data.frame library(dplyr) mtcars |>  select(cyl, vs) |>  construct_model_points()  mtcars |>   select(cyl, vs, disp) |>   construct_model_points(exposure = disp)  mtcars |>  select(cyl, vs, disp, gear) |>  construct_model_points(exposure = disp, exposure_by = gear)  mtcars |>  select(cyl, vs, disp, gear, mpg) |>  construct_model_points(exposure = disp, exposure_by = gear,    agg_cols = list(mpg))  # With glm library(datasets) data1 <- warpbreaks |>  mutate(jaar = c(rep(2000, 10), rep(2010, 44))) |>  mutate(exposure = 1) |>  mutate(nclaims = 2)  pmodel <- glm(breaks ~ wool + tension, data1, offset = log(exposure),  family = poisson(link = \"log\"))  model_data(pmodel) |>  construct_model_points()  model_data(pmodel) |>  construct_model_points(agg_cols = list(nclaims))  model_data(pmodel) |>  construct_model_points(exposure = exposure, exposure_by = jaar) |>  add_prediction(pmodel)  } # }"},{"path":"https://mharinga.github.io/insurancerating/reference/construct_tariff_classes.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct insurance tariff classes — construct_tariff_classes","title":"Construct insurance tariff classes — construct_tariff_classes","text":"Constructs insurance tariff classes fitgam objects produced fit_gam. goal bin continuous risk factors categorical risk factors result capture effect covariate response accurate way, easy use generalized linear model (GLM).","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/construct_tariff_classes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct insurance tariff classes — construct_tariff_classes","text":"","code":"construct_tariff_classes(   object,   alpha = 0,   niterations = 10000,   ntrees = 200,   seed = 1 )"},{"path":"https://mharinga.github.io/insurancerating/reference/construct_tariff_classes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct insurance tariff classes — construct_tariff_classes","text":"object fitgam object produced fit_gam alpha complexity parameter. complexity parameter (alpha) used control number tariff classes. Higher values alpha render less tariff classes. (alpha = 0 default). niterations case run converge, terminates specified number iterations defined niterations. ntrees number trees population. seed numeric seed initialize random number generator (reproducibility).","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/construct_tariff_classes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct insurance tariff classes — construct_tariff_classes","text":"list class constructtariffclasses components prediction data frame predicted values x name continuous risk factor tariff classes constructed model either 'frequency', 'severity' 'burning' data data frame predicted values observed values x_obs observations continuous risk factor splits vector boundaries constructed tariff classes tariff_classes values vector x coded according constructed tariff class fall","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/construct_tariff_classes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Construct insurance tariff classes — construct_tariff_classes","text":"Evolutionary trees used technique bin fitgam object produced fit_gam risk homogeneous categories. method based work Henckaerts et al. (2018). See Grubinger et al. (2014) details various parameters control aspects evtree fit.","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/construct_tariff_classes.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Construct insurance tariff classes — construct_tariff_classes","text":"Antonio, K. Valdez, E. . (2012). Statistical concepts priori posteriori risk classification insurance. Advances Statistical Analysis, 96(2):187–224. doi:10.1007/s10182-011-0152-7. Grubinger, T., Zeileis, ., Pfeiffer, K.-P. (2014). evtree: Evolutionary learning globally optimal classification regression trees R. Journal Statistical Software, 61(1):1–29. doi:10.18637/jss.v061.i01. Henckaerts, R., Antonio, K., Clijsters, M. Verbelen, R. (2018). data driven binning strategy construction insurance tariff classes. Scandinavian Actuarial Journal, 2018:8, 681-705. doi:10.1080/03461238.2018.1429300. Wood, S.N. (2011). Fast stable restricted maximum likelihood marginal likelihood estimation semiparametric generalized linear models. Journal Royal Statistical Society (B) 73(1):3-36. doi:10.1111/j.1467-9868.2010.00749.x.","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/construct_tariff_classes.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Construct insurance tariff classes — construct_tariff_classes","text":"Martin Haringa","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/construct_tariff_classes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct insurance tariff classes — construct_tariff_classes","text":"","code":"if (FALSE) { # \\dontrun{ library(dplyr) fit_gam(MTPL, nclaims = nclaims, x = age_policyholder, exposure = exposure) |>    construct_tariff_classes() } # }"},{"path":"https://mharinga.github.io/insurancerating/reference/fisher.html","id":null,"dir":"Reference","previous_headings":"","what":"Fisher's natural breaks classification — fisher","title":"Fisher's natural breaks classification — fisher","text":"function provides interface finding class intervals continuous numerical variables, example choosing colours plotting maps.","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/fisher.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fisher's natural breaks classification — fisher","text":"","code":"fisher(vec, n = 7, diglab = 2)"},{"path":"https://mharinga.github.io/insurancerating/reference/fisher.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fisher's natural breaks classification — fisher","text":"vec continuous numerical variable n number classes required (n = 7 default) diglab number digits (n = 2 default)","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/fisher.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fisher's natural breaks classification — fisher","text":"Vector clustering","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/fisher.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fisher's natural breaks classification — fisher","text":"\"fisher\" style uses algorithm proposed W. D. Fisher (1958) discussed Slocum et al. (2005) Fisher-Jenks algorithm. function adopted classInt package.","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/fisher.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fisher's natural breaks classification — fisher","text":"Bivand, R. (2018). classInt: Choose Univariate Class Intervals. R package version 0.2-3. https://CRAN.R-project.org/package=classInt Fisher, W. D. 1958 \"grouping maximum homogeneity\", Journal American Statistical Association, 53, pp. 789–798. doi: 10.1080/01621459.1958.10501479.","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/fisher.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fisher's natural breaks classification — fisher","text":"Martin Haringa","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/fit_gam.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalized additive model — fit_gam","title":"Generalized additive model — fit_gam","text":"Fits generalized additive model (GAM) continuous risk factors one following three types models: number reported claims (claim frequency), severity reported claims (claim severity) burning cost (.e. risk premium pure premium).","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/fit_gam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized additive model — fit_gam","text":"","code":"fit_gam(   data,   nclaims,   x,   exposure,   amount = NULL,   pure_premium = NULL,   model = \"frequency\",   round_x = NULL )"},{"path":"https://mharinga.github.io/insurancerating/reference/fit_gam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized additive model — fit_gam","text":"data data.frame insurance portfolio nclaims column data number claims x column data continuous risk factor exposure column data exposure amount column data claim amount pure_premium column data pure premium model choose either 'frequency', 'severity' 'burning' (model = 'frequency' default). See details section. round_x round elements column x multiple round_x. gives speed enhancement data containing many levels x.","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/fit_gam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generalized additive model — fit_gam","text":"list components prediction data frame predicted values x name continuous risk factor model either 'frequency', 'severity' 'burning' data data frame predicted values observed values x_obs observations continuous risk factor","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/fit_gam.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generalized additive model — fit_gam","text":"'frequency' specification uses Poisson GAM fitting number claims. logarithm exposure included offset, expected number claims proportional exposure. 'severity' specification uses lognormal GAM fitting average cost claim. average cost claim defined ratio claim amount number claims. number claims included weight. 'burning' specification uses lognormal GAM fitting pure premium claim. pure premium obtained multiplying estimated frequency estimated severity claims. word burning cost used equivalent risk premium pure premium. Note functionality fitting GAM pure premium still experimental (early stages development).","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/fit_gam.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generalized additive model — fit_gam","text":"Antonio, K. Valdez, E. . (2012). Statistical concepts priori posteriori risk classification insurance. Advances Statistical Analysis, 96(2):187–224. doi:10.1007/s10182-011-0152-7. Grubinger, T., Zeileis, ., Pfeiffer, K.-P. (2014). evtree: Evolutionary learning globally optimal classification regression trees R. Journal Statistical Software, 61(1):1–29. doi:10.18637/jss.v061.i01. Henckaerts, R., Antonio, K., Clijsters, M. Verbelen, R. (2018). data driven binning strategy construction insurance tariff classes. Scandinavian Actuarial Journal, 2018:8, 681-705. doi:10.1080/03461238.2018.1429300. Wood, S.N. (2011). Fast stable restricted maximum likelihood marginal likelihood estimation semiparametric generalized linear models. Journal Royal Statistical Society (B) 73(1):3-36. doi:10.1111/j.1467-9868.2010.00749.x.","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/fit_gam.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generalized additive model — fit_gam","text":"Martin Haringa","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/fit_gam.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generalized additive model — fit_gam","text":"","code":"fit_gam(MTPL, nclaims = nclaims, x = age_policyholder, exposure = exposure) #>            x  predicted     lwr_95    upr_95 #> 1   18.00000 0.33683705 0.21781040 0.5209081 #> 2   18.77778 0.32218997 0.21698662 0.4783999 #> 3   19.55556 0.30817998 0.21568460 0.4403416 #> 4   20.33333 0.29478165 0.21372588 0.4065779 #> 5   21.11111 0.28197418 0.21093250 0.3769426 #> 6   21.88889 0.26974205 0.20717072 0.3512117 #> 7   22.66667 0.25807532 0.20239831 0.3290683 #> 8   23.44444 0.24696930 0.19669877 0.3100875 #> 9   24.22222 0.23642372 0.19028011 0.2937573 #> 10  25.00000 0.22644165 0.18343007 0.2795388 #> 11  25.77778 0.21702844 0.17644700 0.2669433 #> 12  26.55556 0.20819044 0.16958063 0.2555908 #> 13  27.33333 0.19993360 0.16300468 0.2452288 #> 14  28.11111 0.19226234 0.15681941 0.2357158 #> 15  28.88889 0.18517864 0.15107034 0.2269878 #> 16  29.66667 0.17868117 0.14577063 0.2190219 #> 17  30.44444 0.17276468 0.14091962 0.2118061 #> 18  31.22222 0.16741962 0.13651454 0.2053212 #> 19  32.00000 0.16263204 0.13255476 0.1995340 #> 20  32.77778 0.15838349 0.12904044 0.1943990 #> 21  33.55556 0.15465092 0.12596792 0.1898651 #> 22  34.33333 0.15140695 0.12332514 0.1858831 #> 23  35.11111 0.14862005 0.12108853 0.1824113 #> 24  35.88889 0.14625487 0.11922234 0.1794168 #> 25  36.66667 0.14427229 0.11768048 0.1768730 #> 26  37.44444 0.14262987 0.11641068 0.1747544 #> 27  38.22222 0.14128239 0.11535995 0.1730298 #> 28  39.00000 0.14018239 0.11447950 0.1716561 #> 29  39.77778 0.13928082 0.11372806 0.1705748 #> 30  40.55556 0.13852786 0.11307267 0.1697136 #> 31  41.33333 0.13787411 0.11248705 0.1689907 #> 32  42.11111 0.13727167 0.11194807 0.1683237 #> 33  42.88889 0.13667536 0.11143197 0.1676373 #> 34  43.66667 0.13604407 0.11091147 0.1668717 #> 35  44.44444 0.13534205 0.11035510 0.1659866 #> 36  45.22222 0.13453992 0.10972876 0.1649612 #> 37  46.00000 0.13361546 0.10899937 0.1637908 #> 38  46.77778 0.13255422 0.10813962 0.1624809 #> 39  47.55556 0.13134973 0.10713267 0.1610410 #> 40  48.33333 0.13000323 0.10597508 0.1594794 #> 41  49.11111 0.12852296 0.10467710 0.1578010 #> 42  49.88889 0.12692325 0.10326012 0.1560090 #> 43  50.66667 0.12522346 0.10175212 0.1541090 #> 44  51.44444 0.12344655 0.10018246 0.1521130 #> 45  52.22222 0.12161762 0.09857760 0.1500427 #> 46  53.00000 0.11976256 0.09695867 0.1479297 #> 47  53.77778 0.11790690 0.09534118 0.1458135 #> 48  54.55556 0.11607463 0.09373643 0.1437362 #> 49  55.33333 0.11428738 0.09215413 0.1417365 #> 50  56.11111 0.11256383 0.09060508 0.1398444 #> 51  56.88889 0.11091931 0.08910266 0.1380777 #> 52  57.66667 0.10936563 0.08766282 0.1364414 #> 53  58.44444 0.10791109 0.08630242 0.1349302 #> 54  59.22222 0.10656065 0.08503682 0.1335324 #> 55  60.00000 0.10531631 0.08387718 0.1322353 #> 56  60.77778 0.10417745 0.08282849 0.1310291 #> 57  61.55556 0.10314121 0.08188883 0.1299092 #> 58  62.33333 0.10220313 0.08105032 0.1288765 #> 59  63.11111 0.10135754 0.08030133 0.1279350 #> 60  63.88889 0.10059811 0.07962946 0.1270884 #> 61  64.66667 0.09991824 0.07902461 0.1263360 #> 62  65.44444 0.09931152 0.07848142 0.1256702 #> 63  66.22222 0.09877204 0.07800040 0.1250752 #> 64  67.00000 0.09829468 0.07758724 0.1245288 #> 65  67.77778 0.09787524 0.07725078 0.1240060 #> 66  68.55556 0.09751063 0.07700007 0.1234846 #> 67  69.33333 0.09719881 0.07684142 0.1229494 #> 68  70.11111 0.09693873 0.07677604 0.1223965 #> 69  70.88889 0.09673020 0.07679874 0.1218344 #> 70  71.66667 0.09657374 0.07689774 0.1212843 #> 71  72.44444 0.09647024 0.07705556 0.1207766 #> 72  73.22222 0.09642076 0.07725076 0.1203478 #> 73  74.00000 0.09642621 0.07745955 0.1200370 #> 74  74.77778 0.09648712 0.07765661 0.1198838 #> 75  75.55556 0.09660332 0.07781429 0.1199292 #> 76  76.33333 0.09677375 0.07790047 0.1202195 #> 77  77.11111 0.09699627 0.07787574 0.1208114 #> 78  77.88889 0.09726760 0.07769195 0.1217756 #> 79  78.66667 0.09758320 0.07729414 0.1231980 #> 80  79.44444 0.09793730 0.07662748 0.1251733 #> 81  80.22222 0.09832305 0.07564773 0.1277953 #> 82  81.00000 0.09873263 0.07433108 0.1311448 #> 83  81.77778 0.09915751 0.07267893 0.1352829 #> 84  82.55556 0.09958874 0.07071599 0.1402500 #> 85  83.33333 0.10001728 0.06848345 0.1460711 #> 86  84.11111 0.10043439 0.06603031 0.1527642 #> 87  84.88889 0.10083198 0.06340585 0.1603494 #> 88  85.66667 0.10120300 0.06065455 0.1688587 #> 89  86.44444 0.10154181 0.05781385 0.1783438 #> 90  87.22222 0.10184440 0.05491416 0.1888817 #> 91  88.00000 0.10210858 0.05198048 0.2005784 #> 92  88.77778 0.10233412 0.04903472 0.2135685 #> 93  89.55556 0.10252277 0.04609792 0.2280129 #> 94  90.33333 0.10267806 0.04319190 0.2440917 #> 95  91.11111 0.10280433 0.04033996 0.2619916 #> 96  91.88889 0.10290626 0.03756567 0.2818982 #> 97  92.66667 0.10298930 0.03489104 0.3039977 #> 98  93.44444 0.10305920 0.03233509 0.3284728 #> 99  94.22222 0.10312138 0.02991252 0.3555039 #> 100 95.00000 0.10318029 0.02763269 0.3852745"},{"path":"https://mharinga.github.io/insurancerating/reference/fit_truncated_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a distribution to truncated severity (loss) data — fit_truncated_dist","title":"Fit a distribution to truncated severity (loss) data — fit_truncated_dist","text":"Estimate original distribution truncated data. Truncated data arise frequently insurance studies. common claims certain threshold known.","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/fit_truncated_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a distribution to truncated severity (loss) data — fit_truncated_dist","text":"","code":"fit_truncated_dist(   y,   dist = c(\"gamma\", \"lognormal\"),   left = NULL,   right = NULL,   start = NULL,   print_initial = TRUE )"},{"path":"https://mharinga.github.io/insurancerating/reference/fit_truncated_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a distribution to truncated severity (loss) data — fit_truncated_dist","text":"y vector observations losses dist distribution severity (\"gamma\" \"lognormal\"). Defaults \"gamma\". left numeric. Observations threshold present sample. right numeric. Observations threshold present sample. Defaults Inf. start list starting parameters algorithm. print_initial print attempts initial parameters.","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/fit_truncated_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a distribution to truncated severity (loss) data — fit_truncated_dist","text":"fitdist returns object class \"fitdist\"","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/fit_truncated_dist.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fit a distribution to truncated severity (loss) data — fit_truncated_dist","text":"Martin Haringa","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/fit_truncated_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a distribution to truncated severity (loss) data — fit_truncated_dist","text":"","code":"if (FALSE) { # \\dontrun{ # Original observations for severity set.seed(1) e <- rgamma(1000, scale = 148099.5, shape = 0.4887023)  # Truncated data (only claims above 30.000 euros) threshold <- 30000 f <- e[e > threshold]  library(dplyr) library(ggplot2) data.frame(value = c(e, f), variable = rep(c(\"Original data\", \"Only claims above 30.000 euros\"),                c(length(e), length(f)))) %>%                filter(value < 5e5) %>%                mutate(value = value / 1000) %>%                ggplot(aes(x = value)) +                geom_histogram(colour = \"white\") +                facet_wrap(~variable, ncol = 1) +                labs(y = \"Number of observations\",                     x = \"Severity (x 1000 EUR)\")  # scale = 156259.7 and shape = 0.4588. Close to parameters of original # distribution! x <- fit_truncated_dist(f, left = threshold, dist = \"gamma\")  # Print cdf autoplot(x)  # CDF with modifications autoplot(x, print_dig = 5, xlab = \"loss\", ylab = \"cdf\", ylim = c(.9, 1))  est_scale <- x$estimate[1] est_shape <- x$estimate[2]  # Generate data from truncated distribution (between 30k en 20 mln) rg <- rgammat(10, scale = est_scale, shape = est_shape, lower = 3e4,  upper = 20e6)  # Calculate quantiles quantile(rg, probs = c(.5, .9, .99, .995)) } # }"},{"path":"https://mharinga.github.io/insurancerating/reference/histbin.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a histogram with outlier bins — histbin","title":"Create a histogram with outlier bins — histbin","text":"Visualize distribution single continuous variable dividing x axis bins counting number observations bin. Data points considered outliers can binned together. might helpful display numerical data wide range values compact way.","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/histbin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a histogram with outlier bins — histbin","text":"","code":"histbin(   data,   x,   left = NULL,   right = NULL,   line = FALSE,   bins = 30,   fill = NULL,   color = NULL,   fill_outliers = \"#a7d1a7\" )"},{"path":"https://mharinga.github.io/insurancerating/reference/histbin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a histogram with outlier bins — histbin","text":"data data.frame x variable name data.frame data mapped left numeric indicating floor range right numeric indicating ceiling range line show density line (default FALSE) bins numeric indicate number bins fill color used fill bars color color bar lines fill_outliers color used fill outlier bars","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/histbin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a histogram with outlier bins — histbin","text":"ggplot2 object","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/histbin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a histogram with outlier bins — histbin","text":"Wrapper function around ggplot2::geom_histogram(). method based suggestions https://edwinth.github.io/blog/outlier-bin/.","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/histbin.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a histogram with outlier bins — histbin","text":"Martin Haringa","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/histbin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a histogram with outlier bins — histbin","text":"","code":"histbin(MTPL2, premium)  histbin(MTPL2, premium, left = 30, right = 120, bins = 30)"},{"path":"https://mharinga.github.io/insurancerating/reference/model_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get model data — model_data","title":"Get model data — model_data","text":"model_data() used get data glm, must preceded update_glm() glm().","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/model_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get model data — model_data","text":"","code":"model_data(x)"},{"path":"https://mharinga.github.io/insurancerating/reference/model_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get model data — model_data","text":"x Object class refitsmooth, refitrestricted glm","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/model_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get model data — model_data","text":"data.frame","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/model_data.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get model data — model_data","text":"Martin Haringa","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/model_performance.html","id":null,"dir":"Reference","previous_headings":"","what":"Performance of fitted GLMs — model_performance","title":"Performance of fitted GLMs — model_performance","text":"Compute indices model performance (one ) GLMs.","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/model_performance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performance of fitted GLMs — model_performance","text":"","code":"model_performance(...)"},{"path":"https://mharinga.github.io/insurancerating/reference/model_performance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performance of fitted GLMs — model_performance","text":"... One objects class glm.","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/model_performance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performance of fitted GLMs — model_performance","text":"data frame","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/model_performance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Performance of fitted GLMs — model_performance","text":"following indices computed: AIC Akaike's Information Criterion BIC Bayesian Information Criterion RMSE Root mean squared error Adopted performance::model_performance().","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/model_performance.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Performance of fitted GLMs — model_performance","text":"Martin Haringa","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/model_performance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performance of fitted GLMs — model_performance","text":"","code":"m1 <- glm(nclaims ~ area, offset = log(exposure), family = poisson(),           data = MTPL2) m2 <- glm(nclaims ~ area, offset = log(exposure), family = poisson(),           data = MTPL2) model_performance(m1, m2) #> # Comparison of Model Performance Indices #>  #> Model |     AIC |     BIC | RMSE #> -------------------------------- #> m1    | 2285.73 | 2297.74 | 0.36 #> m2    | 2285.73 | 2297.74 | 0.36"},{"path":"https://mharinga.github.io/insurancerating/reference/period_to_months.html","id":null,"dir":"Reference","previous_headings":"","what":"Split period to months — period_to_months","title":"Split period to months — period_to_months","text":"function splits rows time period longer one month multiple rows time period exactly one month . Values numeric columns (e.g. exposure premium) divided months proportionately.","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/period_to_months.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split period to months — period_to_months","text":"","code":"period_to_months(df, begin, end, ...)"},{"path":"https://mharinga.github.io/insurancerating/reference/period_to_months.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split period to months — period_to_months","text":"df data.frame begin column df begin dates end column df end dates ... numeric columns df split","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/period_to_months.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split period to months — period_to_months","text":"data.frame columns df, one extra column called id","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/period_to_months.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Split period to months — period_to_months","text":"insurance portfolios common rows relate periods longer one month. example problematic case exposures per month desired. Since insurance premiums constant months, depend number days per month, function assumes month number days (.e. 30).","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/period_to_months.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Split period to months — period_to_months","text":"Martin Haringa","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/period_to_months.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split period to months — period_to_months","text":"","code":"library(lubridate) #>  #> Attaching package: ‘lubridate’ #> The following objects are masked from ‘package:base’: #>  #>     date, intersect, setdiff, union portfolio <- data.frame( begin1 = ymd(c(\"2014-01-01\", \"2014-01-01\")), end = ymd(c(\"2014-03-14\", \"2014-05-10\")), termination = ymd(c(\"2014-03-14\", \"2014-05-10\")), exposure = c(0.2025, 0.3583), premium =  c(125, 150)) period_to_months(portfolio, begin1, end, premium, exposure) #>       id     begin1        end termination   exposure  premium #>    <int>     <Date>     <Date>      <Date>      <num>    <num> #> 1:     1 2014-01-01 2014-01-31  2014-03-14 0.08209459 50.67568 #> 2:     1 2014-02-01 2014-02-28  2014-03-14 0.08209459 50.67568 #> 3:     1 2014-03-01 2014-03-31  2014-03-14 0.03831081 23.64865 #> 4:     2 2014-01-01 2014-01-31  2014-05-10 0.08268462 34.61538 #> 5:     2 2014-02-01 2014-02-28  2014-05-10 0.08268462 34.61538 #> 6:     2 2014-03-01 2014-03-31  2014-05-10 0.08268462 34.61538 #> 7:     2 2014-04-01 2014-04-30  2014-05-10 0.08268462 34.61538 #> 8:     2 2014-05-01 2014-05-31  2014-05-10 0.02756154 11.53846"},{"path":"https://mharinga.github.io/insurancerating/reference/rating_factors.html","id":null,"dir":"Reference","previous_headings":"","what":"Include reference group in regression output — rating_factors","title":"Include reference group in regression output — rating_factors","text":"Extract coefficients terms original levels coefficients rather coded variables.","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/rating_factors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Include reference group in regression output — rating_factors","text":"","code":"rating_factors(   ...,   model_data = NULL,   exposure = NULL,   exponentiate = TRUE,   signif_stars = FALSE,   round_exposure = 0 )"},{"path":"https://mharinga.github.io/insurancerating/reference/rating_factors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Include reference group in regression output — rating_factors","text":"... glm object(s) produced glm() model_data data.frame used create glm object(s), specified case exposure desired output, default value NULL exposure column model_data exposure, default value NULL exponentiate logical indicating whether exponentiate coefficient estimates. Defaults TRUE. signif_stars show significance stars p-values (defaults TRUE) round_exposure number digits exposure (defaults 0)","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/rating_factors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Include reference group in regression output — rating_factors","text":"data.frame","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/rating_factors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Include reference group in regression output — rating_factors","text":"fitted linear model coefficients contrasts factor terms, usually one less number number levels. function re-expresses coefficients original coding. function adopted dummy.coef(). adoption prints data.frame output. Use rating_factors_() standard evaluation.","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/rating_factors.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Include reference group in regression output — rating_factors","text":"Martin Haringa","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/rating_factors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Include reference group in regression output — rating_factors","text":"","code":"df <- MTPL2 |> dplyr::mutate(dplyr::across(c(area), as.factor)) |> dplyr::mutate(dplyr::across(c(area), ~biggest_reference(., exposure)))  mod1 <- glm(nclaims ~ area + premium, offset = log(exposure), family = poisson(), data = df) mod2 <- glm(nclaims ~ area, offset = log(exposure), family = poisson(), data = df)  rating_factors(mod1, mod2, model_data = df, exposure = exposure) #>   risk_factor       level  est_mod1  est_mod2 exposure #> 1 (Intercept) (Intercept) 0.1279538 0.1369930       NA #> 2        area           0 0.5465581 0.5485629       13 #> 3        area           1 1.0000000 1.0000000     1066 #> 4        area           2 0.8728835 0.8739528      819 #> 5        area           3 1.0762334 1.0782596      765 #> 6     premium     premium 1.0012348        NA       NA"},{"path":"https://mharinga.github.io/insurancerating/reference/reduce.html","id":null,"dir":"Reference","previous_headings":"","what":"Reduce portfolio by merging redundant date ranges — reduce","title":"Reduce portfolio by merging redundant date ranges — reduce","text":"Transform date ranges together set produce new set date ranges. Ranges separated gap least min.gapwidth days merged.","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/reduce.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reduce portfolio by merging redundant date ranges — reduce","text":"","code":"reduce(df, begin, end, ..., agg_cols = NULL, agg = \"sum\", min.gapwidth = 5)"},{"path":"https://mharinga.github.io/insurancerating/reference/reduce.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reduce portfolio by merging redundant date ranges — reduce","text":"df data.frame begin name column df begin dates end name column df end dates ... names columns df used group date ranges agg_cols list columns df aggregate (defaults NULL) agg aggregation type (defaults \"sum\") min.gapwidth ranges separated gap least min.gapwidth days merged. Defaults 5.","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/reduce.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reduce portfolio by merging redundant date ranges — reduce","text":"object class \"reduce\". function summary used obtain print summary results. object class \"reduce\" list usually containing least following elements: df data frame reduced time periods begin name column df begin dates end name column df end dates cols names columns df used group date ranges ","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/reduce.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reduce portfolio by merging redundant date ranges — reduce","text":"function adopted IRanges::reduce().","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/reduce.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Reduce portfolio by merging redundant date ranges — reduce","text":"Martin Haringa","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/reduce.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reduce portfolio by merging redundant date ranges — reduce","text":"","code":"portfolio <- structure(list(policy_nr = c(\"12345\", \"12345\", \"12345\", \"12345\", \"12345\", \"12345\", \"12345\", \"12345\", \"12345\", \"12345\", \"12345\"), productgroup = c(\"fire\", \"fire\", \"fire\", \"fire\", \"fire\", \"fire\", \"fire\", \"fire\", \"fire\", \"fire\", \"fire\"), product = c(\"contents\", \"contents\", \"contents\", \"contents\", \"contents\", \"contents\", \"contents\", \"contents\", \"contents\", \"contents\", \"contents\"), begin_dat = structure(c(16709,16740, 16801, 17410, 17440, 17805, 17897, 17956, 17987, 18017, 18262), class = \"Date\"), end_dat = structure(c(16739, 16800, 16831, 17439, 17531, 17896, 17955, 17986, 18016, 18261, 18292), class = \"Date\"), premium = c(89L, 58L, 83L, 73L, 69L, 94L, 91L, 97L, 57L, 65L, 55L)), row.names = c(NA, -11L), class = \"data.frame\")  # Merge periods pt1 <- reduce(portfolio, begin = begin_dat, end = end_dat, policy_nr,     productgroup, product, min.gapwidth = 5)  # Aggregate per period summary(pt1, period = \"days\", policy_nr, productgroup, product) #>         date type count policy_nr productgroup  product #> 1 2020-02-01  out     1     12345         fire contents #> 2 2018-10-01   in     1     12345         fire contents #> 3 2018-01-01  out     1     12345         fire contents #> 4 2017-09-01   in     1     12345         fire contents #> 5 2016-02-01  out     1     12345         fire contents #> 6 2015-10-01   in     1     12345         fire contents  # Merge periods and sum premium per period pt2 <- reduce(portfolio, begin = begin_dat, end = end_dat, policy_nr,     productgroup, product, agg_cols = list(premium), min.gapwidth = 5)  # Create summary with aggregation per week summary(pt2, period = \"weeks\", policy_nr, productgroup, product) #>      week type count policy_nr productgroup  product #> 1 2020W06  out     1     12345         fire contents #> 2 2018W40   in     1     12345         fire contents #> 3 2018W02  out     1     12345         fire contents #> 4 2017W35   in     1     12345         fire contents #> 5 2016W06  out     1     12345         fire contents #> 6 2015W40   in     1     12345         fire contents"},{"path":"https://mharinga.github.io/insurancerating/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. ggplot2 autoplot","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/refit_glm.html","id":null,"dir":"Reference","previous_headings":"","what":"Refitting Generalized Linear Models — refit_glm","title":"Refitting Generalized Linear Models — refit_glm","text":"refit_glm() used refit generalized linear models, must preceded restrict_coef().","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/refit_glm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Refitting Generalized Linear Models — refit_glm","text":"","code":"refit_glm(x)"},{"path":"https://mharinga.github.io/insurancerating/reference/refit_glm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Refitting Generalized Linear Models — refit_glm","text":"x Object class restricted class smooth","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/refit_glm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Refitting Generalized Linear Models — refit_glm","text":"Object class GLM","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/refit_glm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Refitting Generalized Linear Models — refit_glm","text":"Martin Haringa","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/restrict_coef.html","id":null,"dir":"Reference","previous_headings":"","what":"Restrict coefficients in the model — restrict_coef","title":"Restrict coefficients in the model — restrict_coef","text":"Add restrictions, like bonus-malus structure, risk factors used model. restrict_coef() must always followed update_glm().","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/restrict_coef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Restrict coefficients in the model — restrict_coef","text":"","code":"restrict_coef(model, restrictions)"},{"path":"https://mharinga.github.io/insurancerating/reference/restrict_coef.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Restrict coefficients in the model — restrict_coef","text":"model object class glm/restricted restrictions data.frame two columns containing restricted data. first column, name risk factor column name, must contain levels risk factor. second column must contain restricted coefficients.","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/restrict_coef.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Restrict coefficients in the model — restrict_coef","text":"Object class restricted.","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/restrict_coef.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Restrict coefficients in the model — restrict_coef","text":"Although restrictions applied either frequency severity model, appropriate impose restrictions premium model. can achieved calculating pure premium record (.e. expected number claims times expected claim amount), fitting \"unrestricted\" Gamma GLM pure premium,imposing restrictions final \"restricted\" Gamma GLM.","code":""},{"path":[]},{"path":"https://mharinga.github.io/insurancerating/reference/restrict_coef.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Restrict coefficients in the model — restrict_coef","text":"Martin Haringa","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/restrict_coef.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Restrict coefficients in the model — restrict_coef","text":"","code":"if (FALSE) { # \\dontrun{ # Add restrictions to risk factors for region (zip) -------------------------  # Fit frequency and severity model library(dplyr) freq <- glm(nclaims ~ bm + zip, offset = log(exposure), family = poisson(),              data = MTPL) sev <- glm(amount ~ bm + zip, weights = nclaims,             family = Gamma(link = \"log\"),             data = MTPL |> filter(amount > 0))  # Add predictions for freq and sev to data, and calculate premium premium_df <- MTPL |>    add_prediction(freq, sev) |>    mutate(premium = pred_nclaims_freq * pred_amount_sev)  # Restrictions on risk factors for region (zip) zip_df <- data.frame(zip = c(0,1,2,3), zip_rst = c(0.8, 0.9, 1, 1.2))  # Fit unrestricted model burn <- glm(premium ~ bm + zip, weights = exposure,             family = Gamma(link = \"log\"), data = premium_df)  # Fit restricted model burn_rst <- burn |>   restrict_coef(restrictions = zip_df) |>   update_glm()  # Show rating factors rating_factors(burn_rst) } # }"},{"path":"https://mharinga.github.io/insurancerating/reference/rgammat.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate data from truncated gamma distribution — rgammat","title":"Generate data from truncated gamma distribution — rgammat","text":"Random generation truncated Gamma distribution parameters shape scale.","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/rgammat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate data from truncated gamma distribution — rgammat","text":"","code":"rgammat(n, scale = scale, shape = shape, lower, upper)"},{"path":"https://mharinga.github.io/insurancerating/reference/rgammat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate data from truncated gamma distribution — rgammat","text":"n number observations scale scale parameter shape shape parameter lower numeric. Observations threshold present sample. upper numeric. Observations threshold present sample.","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/rgammat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate data from truncated gamma distribution — rgammat","text":"length result determined n.","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/rgammat.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate data from truncated gamma distribution — rgammat","text":"Martin Haringa","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/rlnormt.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate data from truncated lognormal distribution — rlnormt","title":"Generate data from truncated lognormal distribution — rlnormt","text":"Random generation truncated log normal distribution whose logarithm mean equal meanlog standard deviation equal sdlog.","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/rlnormt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate data from truncated lognormal distribution — rlnormt","text":"","code":"rlnormt(n, meanlog, sdlog, lower, upper)"},{"path":"https://mharinga.github.io/insurancerating/reference/rlnormt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate data from truncated lognormal distribution — rlnormt","text":"n number observations meanlog mean distribution log scale sdlog standard deviation distribution log scale lower numeric. Observations threshold present sample. upper numeric. Observations threshold present sample.","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/rlnormt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate data from truncated lognormal distribution — rlnormt","text":"length result determined n.","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/rlnormt.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate data from truncated lognormal distribution — rlnormt","text":"Martin Haringa","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/rmse.html","id":null,"dir":"Reference","previous_headings":"","what":"Root Mean Squared Error — rmse","title":"Root Mean Squared Error — rmse","text":"Compute root mean squared error.","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/rmse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Root Mean Squared Error — rmse","text":"","code":"rmse(object, data)"},{"path":"https://mharinga.github.io/insurancerating/reference/rmse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Root Mean Squared Error — rmse","text":"object fitted model data data.frame (defaults NULL)","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/rmse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Root Mean Squared Error — rmse","text":"numeric value","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/rmse.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Root Mean Squared Error — rmse","text":"RMSE square root average squared differences prediction actual observation indicates absolute fit model data. can interpreted standard deviation unexplained variance, units response variable. Lower values indicate better model fit.","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/rmse.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Root Mean Squared Error — rmse","text":"Martin Haringa","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/rmse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Root Mean Squared Error — rmse","text":"","code":"x <- glm(nclaims ~ area, offset = log(exposure), family = poisson(),  data = MTPL2) rmse(x, MTPL2) #> [1] 0.3564342"},{"path":"https://mharinga.github.io/insurancerating/reference/rows_per_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Find active rows per date — rows_per_date","title":"Find active rows per date — rows_per_date","text":"Fast overlap joins. Usually, df large data.table (e.g. insurance portfolio) small interval ranges, dates much smaller (e.g.) claim dates.","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/rows_per_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find active rows per date — rows_per_date","text":"","code":"rows_per_date(   df,   dates,   df_begin,   df_end,   dates_date,   ...,   nomatch = NULL,   mult = \"all\" )"},{"path":"https://mharinga.github.io/insurancerating/reference/rows_per_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find active rows per date — rows_per_date","text":"df data.frame portfolio (df include time period) dates data.frame dates join df_begin column name begin dates time period df df_end column name end dates time period df dates_date column name dates dates ... additional column names dates join nomatch row (interval say, [,b]) x match y, nomatch=NA means NA returned y's non-.y columns row x. nomatch=NULL (default) means rows returned row x. mult multiple rows y match row x, mult controls values returned - \"\" (default), \"first\" \"last\".","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/rows_per_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find active rows per date — rows_per_date","text":"returned class equal class df","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/rows_per_date.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Find active rows per date — rows_per_date","text":"Martin Haringa","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/rows_per_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find active rows per date — rows_per_date","text":"","code":"library(lubridate) portfolio <- data.frame( begin1 = ymd(c(\"2014-01-01\", \"2014-01-01\")), end = ymd(c(\"2014-03-14\", \"2014-05-10\")), termination = ymd(c(\"2014-03-14\", \"2014-05-10\")), exposure = c(0.2025, 0.3583), premium =  c(125, 150), car_type = c(\"BMW\", \"TESLA\"))  ## Find active rows on different dates dates0 <- data.frame(active_date = seq(ymd(\"2014-01-01\"), ymd(\"2014-05-01\"), by = \"months\")) rows_per_date(portfolio, dates0, df_begin = begin1, df_end = end, dates_date = active_date) #>       begin1        end termination exposure premium car_type index_df #> 1 2014-01-01 2014-03-14  2014-03-14   0.2025     125      BMW        1 #> 2 2014-01-01 2014-05-10  2014-05-10   0.3583     150    TESLA        2 #> 3 2014-01-01 2014-03-14  2014-03-14   0.2025     125      BMW        1 #> 4 2014-01-01 2014-05-10  2014-05-10   0.3583     150    TESLA        2 #> 5 2014-01-01 2014-03-14  2014-03-14   0.2025     125      BMW        1 #> 6 2014-01-01 2014-05-10  2014-05-10   0.3583     150    TESLA        2 #> 7 2014-01-01 2014-05-10  2014-05-10   0.3583     150    TESLA        2 #> 8 2014-01-01 2014-05-10  2014-05-10   0.3583     150    TESLA        2 #>   active_date index_dates #> 1  2014-01-01           1 #> 2  2014-01-01           1 #> 3  2014-02-01           2 #> 4  2014-02-01           2 #> 5  2014-03-01           3 #> 6  2014-03-01           3 #> 7  2014-04-01           4 #> 8  2014-05-01           5  ## With extra identifiers (merge claim date with time interval in portfolio) claim_dates <- data.frame(claim_date = ymd(\"2014-01-01\"), car_type = c(\"BMW\", \"VOLVO\"))  ### Only rows are returned that can be matched rows_per_date(portfolio, claim_dates, df_begin = begin1,    df_end = end, dates_date = claim_date, car_type) #>        begin1        end termination exposure premium car_type index_df #>        <Date>     <Date>      <Date>    <num>   <num>   <char>    <int> #> 1: 2014-01-01 2014-03-14  2014-03-14   0.2025     125      BMW        1 #>    claim_date index_dates #>        <Date>       <int> #> 1: 2014-01-01           1  ### When row cannot be matched, NA is returned for that row rows_per_date(portfolio, claim_dates, df_begin = begin1,    df_end = end, dates_date = claim_date, car_type, nomatch = NA) #>        begin1        end termination exposure premium car_type index_df #>        <Date>     <Date>      <Date>    <num>   <num>   <char>    <int> #> 1: 2014-01-01 2014-03-14  2014-03-14   0.2025     125      BMW        1 #> 2: 2014-01-01 2014-05-10  2014-05-10   0.3583     150    TESLA        2 #>    claim_date index_dates #>        <Date>       <int> #> 1: 2014-01-01           1 #> 2:       <NA>          NA"},{"path":"https://mharinga.github.io/insurancerating/reference/smooth_coef.html","id":null,"dir":"Reference","previous_headings":"","what":"Smooth coefficients in the model — smooth_coef","title":"Smooth coefficients in the model — smooth_coef","text":"Apply smoothing risk factors used model. smooth_coef() must always followed update_glm().","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/smooth_coef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Smooth coefficients in the model — smooth_coef","text":"","code":"smooth_coef(   model,   x_cut,   x_org,   degree = NULL,   breaks = NULL,   smoothing = \"spline\",   k = NULL,   weights = NULL )"},{"path":"https://mharinga.github.io/insurancerating/reference/smooth_coef.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Smooth coefficients in the model — smooth_coef","text":"model object class glm/smooth x_cut column name breaks/cut x_org column name x_cut based degree order polynomial breaks numerical vector new clusters x smoothing choose smoothing specification (shape constrained smooth terms (SCOP-splines) constructed using B-splines basis proposed Eilers Marx (1996) discrete penalty basis coefficients: 'spline' (default) 'mpi': monotone increasing SCOP-splines 'mpd': monotone decreasing SCOP-splines 'cx': convex SCOP-splines 'cv': concave SCOP-splines 'micx': increasing convex SCOP-splines 'micv': increasing concave SCOP-splines 'mdcx': decreasing convex SCOP-splines 'mdcv': decreasing concave SCOP-splines 'gam': spline based smooth (thin plate regression spline) k number basis functions computed weights weights used smoothing, must equal exposure (defaults NULL)","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/smooth_coef.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Smooth coefficients in the model — smooth_coef","text":"Object class smooth","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/smooth_coef.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Smooth coefficients in the model — smooth_coef","text":"Although smoothing applied either frequency severity model, appropriate impose smoothing premium model. can achieved calculating pure premium record (.e. expected number claims times expected claim amount), fitting \"unrestricted\" Gamma GLM pure premium, imposing restrictions final \"restricted\" Gamma GLM.","code":""},{"path":[]},{"path":"https://mharinga.github.io/insurancerating/reference/smooth_coef.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Smooth coefficients in the model — smooth_coef","text":"Martin Haringa","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/smooth_coef.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Smooth coefficients in the model — smooth_coef","text":"","code":"if (FALSE) { # \\dontrun{ library(insurancerating) library(dplyr)  # Fit GAM for claim frequency age_policyholder_frequency <- fit_gam(data = MTPL,                                       nclaims = nclaims,                                       x = age_policyholder,                                       exposure = exposure)  # Determine clusters clusters_freq <- construct_tariff_classes(age_policyholder_frequency)  # Add clusters to MTPL portfolio dat <- MTPL |>   mutate(age_policyholder_freq_cat = clusters_freq$tariff_classes) |>   mutate(across(where(is.character), as.factor)) |>   mutate(across(where(is.factor), ~biggest_reference(., exposure)))  # Fit frequency and severity model freq <- glm(nclaims ~ bm + age_policyholder_freq_cat, offset = log(exposure),  family = poisson(), data = dat) sev <- glm(amount ~ bm + zip, weights = nclaims,  family = Gamma(link = \"log\"), data = dat |> filter(amount > 0))  # Add predictions for freq and sev to data, and calculate premium premium_df <- dat |>   add_prediction(freq, sev) |>   mutate(premium = pred_nclaims_freq * pred_amount_sev)  # Fit unrestricted model burn_unrestricted <- glm(premium ~ zip + bm + age_policyholder_freq_cat,                          weights = exposure,                          family = Gamma(link = \"log\"),                          data = premium_df)  # Impose smoothing and create figure burn_unrestricted |>   smooth_coef(x_cut = \"age_policyholder_freq_cat\",               x_org = \"age_policyholder\",               breaks = seq(18, 95, 5)) |>   autoplot()  # Impose smoothing and refit model burn_restricted <- burn_unrestricted |>   smooth_coef(x_cut = \"age_policyholder_freq_cat\",               x_org = \"age_policyholder\",               breaks = seq(18, 95, 5)) |>   update_glm()  # Show new rating factors rating_factors(burn_restricted) } # }"},{"path":"https://mharinga.github.io/insurancerating/reference/summary.reduce.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatically create a summary for objects obtained from reduce() — summary.reduce","title":"Automatically create a summary for objects obtained from reduce() — summary.reduce","text":"Takes object produced reduce(), counts new lost customers.","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/summary.reduce.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatically create a summary for objects obtained from reduce() — summary.reduce","text":"","code":"# S3 method for class 'reduce' summary(object, ..., period = \"days\", name = \"count\")"},{"path":"https://mharinga.github.io/insurancerating/reference/summary.reduce.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatically create a summary for objects obtained from reduce() — summary.reduce","text":"object reduce object produced reduce() ... names columns aggregate counts period character string indicating period aggregate . Four options available: \"quarters\", \"months\", \"weeks\", \"days\" (default option) name name new column output. omitted, default count.","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/summary.reduce.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatically create a summary for objects obtained from reduce() — summary.reduce","text":"data.frame","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/univariate.html","id":null,"dir":"Reference","previous_headings":"","what":"Univariate analysis for discrete risk factors — univariate","title":"Univariate analysis for discrete risk factors — univariate","text":"Univariate analysis discrete risk factors insurance portfolio. following summary statistics calculated: frequency (.e. number claims / exposure) average severity (.e. severity / number claims) risk premium (.e. severity / exposure) loss ratio (.e. severity / premium) average premium (.e. premium / exposure) input arguments specified, summary statistics related arguments ignored.","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/univariate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Univariate analysis for discrete risk factors — univariate","text":"","code":"univariate(   df,   x,   severity = NULL,   nclaims = NULL,   exposure = NULL,   premium = NULL,   by = NULL )"},{"path":"https://mharinga.github.io/insurancerating/reference/univariate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Univariate analysis for discrete risk factors — univariate","text":"df data.frame insurance portfolio x column df risk factor, use vec_ext() use external vector (see examples) severity column df severity (default NULL) nclaims column df number claims (default NULL) exposure column df exposure (default NULL) premium column df premium (default NULL) list column(s) df group ","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/univariate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Univariate analysis for discrete risk factors — univariate","text":"data.frame","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/univariate.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Univariate analysis for discrete risk factors — univariate","text":"Martin Haringa","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/univariate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Univariate analysis for discrete risk factors — univariate","text":"","code":"# Summarize by `area` univariate(MTPL2, x = area, severity = amount, nclaims = nclaims,            exposure = exposure, premium = premium) #> # A tibble: 4 × 10 #>    area  amount nclaims exposure premium frequency average_severity risk_premium #>   <int>   <int>   <int>    <dbl>   <int>     <dbl>            <dbl>        <dbl> #> 1     2 4063270      98    819.    51896    0.120            41462.        4964. #> 2     3 7945311     113    765.    49337    0.148            70312.       10386. #> 3     1 6896187     146   1066.    65753    0.137            47234.        6471. #> 4     0    6922       1     13.3     902    0.0751            6922          520. #> # ℹ 2 more variables: loss_ratio <dbl>, average_premium <dbl>  # Summarize by `area`, with column name in external vector xt <- \"area\" univariate(MTPL2, x = vec_ext(xt), severity = amount, nclaims = nclaims,            exposure = exposure, premium = premium) #> # A tibble: 4 × 10 #>    area  amount nclaims exposure premium frequency average_severity risk_premium #>   <int>   <int>   <int>    <dbl>   <int>     <dbl>            <dbl>        <dbl> #> 1     2 4063270      98    819.    51896    0.120            41462.        4964. #> 2     3 7945311     113    765.    49337    0.148            70312.       10386. #> 3     1 6896187     146   1066.    65753    0.137            47234.        6471. #> 4     0    6922       1     13.3     902    0.0751            6922          520. #> # ℹ 2 more variables: loss_ratio <dbl>, average_premium <dbl>  # Summarize by `zip` and `bm` univariate(MTPL, x = zip, severity = amount, nclaims = nclaims,            exposure = exposure, by = bm) #> # A tibble: 84 × 8 #>    zip      bm   amount nclaims exposure frequency average_severity risk_premium #>    <fct> <int>    <dbl>   <int>    <dbl>     <dbl>            <dbl>        <dbl> #>  1 1         5  4938135      82     550.     0.149           60221.        8983. #>  2 1         3  3623485      86     614.     0.140           42134.        5902. #>  3 2         8  1739654      38     249.     0.152           45780.        6981. #>  4 1        10  2077041      73     451.     0.162           28453.        4601. #>  5 3         1 20064123     381    2841.     0.134           52662.        7062. #>  6 3         6  3814492      82     539.     0.152           46518.        7081. #>  7 3         2 11182348     179    1282.     0.140           62471.        8726. #>  8 2         1 25368747     356    2944.     0.121           71261.        8617. #>  9 1         2 17512277     287    1835.     0.156           61018.        9542. #> 10 2         9   574527      25     237.     0.106           22981.        2428. #> # ℹ 74 more rows  # Summarize by `zip`, `bm` and `power` univariate(MTPL, x = zip, severity = amount, nclaims = nclaims,            exposure = exposure, by = list(bm, power)) #> # A tibble: 3,290 × 9 #>    zip      bm power  amount nclaims exposure frequency average_severity #>    <fct> <int> <int>   <dbl>   <int>    <dbl>     <dbl>            <dbl> #>  1 1         5   106       0       0      1      0                  NaN  #>  2 1         3    74    2687       1     14.1    0.0707            2687  #>  3 2         8    65       0       0      5      0                  NaN  #>  4 1        10    64       0       0      7      0                  NaN  #>  5 3         1    29   37784       3     21.9    0.137            12595. #>  6 3         6    66  114021       2     27.6    0.0726           57010. #>  7 3         2    43 1382215      11     61.3    0.180           125656. #>  8 3         2    55  764498      27    146.     0.185            28315. #>  9 3         1   100    3405       1     14.2    0.0703            3405  #> 10 3         2    66  929945      15     97.1    0.154            61996. #> # ℹ 3,280 more rows #> # ℹ 1 more variable: risk_premium <dbl>"},{"path":"https://mharinga.github.io/insurancerating/reference/update_formula_add.html","id":null,"dir":"Reference","previous_headings":"","what":"Create new offset-term and new formula — update_formula_add","title":"Create new offset-term and new formula — update_formula_add","text":"Create new offset-term new formula","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/update_formula_add.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create new offset-term and new formula — update_formula_add","text":"","code":"update_formula_add(offset_term, fm_no_offset, add_term)"},{"path":"https://mharinga.github.io/insurancerating/reference/update_formula_add.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create new offset-term and new formula — update_formula_add","text":"offset_term String obtained get_offset() fm_no_offset Obtained remove_offset_formula() add_term Name restricted risk factor add","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/update_glm.html","id":null,"dir":"Reference","previous_headings":"","what":"Refitting Generalized Linear Models — update_glm","title":"Refitting Generalized Linear Models — update_glm","text":"update_glm() used refit generalized linear models, must preceded restrict_coef().","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/update_glm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Refitting Generalized Linear Models — update_glm","text":"","code":"update_glm(x, intercept_only = FALSE)"},{"path":"https://mharinga.github.io/insurancerating/reference/update_glm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Refitting Generalized Linear Models — update_glm","text":"x Object class restricted class smooth intercept_only Logical. Default FALSE. TRUE, intercept updated, ensuring changes impact variables.","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/update_glm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Refitting Generalized Linear Models — update_glm","text":"Object class GLM","code":""},{"path":"https://mharinga.github.io/insurancerating/reference/update_glm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Refitting Generalized Linear Models — update_glm","text":"Martin Haringa","code":""},{"path":"https://mharinga.github.io/insurancerating/news/index.html","id":"insurancerating-075","dir":"Changelog","previous_headings":"","what":"insurancerating 0.7.5","title":"insurancerating 0.7.5","text":"rating_factors() now always returns correct output column exposure data named exposure intercept_only update_glm() added apply manual changes refit intercept, ensuring changes impact variables. smoothing smooth_coef() added choose smoothing specification README revised","code":""},{"path":"https://mharinga.github.io/insurancerating/news/index.html","id":"insurancerating-074","dir":"Changelog","previous_headings":"","what":"insurancerating 0.7.4","title":"insurancerating 0.7.4","text":"CRAN release: 2024-05-20 bootstrap_rmse() now uses after_stat(density) instead deprecated dot-dot notation custom_theme autoplot.univariate() added customize theme","code":""},{"path":"https://mharinga.github.io/insurancerating/news/index.html","id":"insurancerating-073","dir":"Changelog","previous_headings":"","what":"insurancerating 0.7.3","title":"insurancerating 0.7.3","text":"CRAN release: 2024-05-09 autoplot.univariate() now generates plot even missing values rows rating_factors() now always returns correct coefficients used ‘refitsmooth’ ‘refitrestricted’ class GLM.","code":""},{"path":"https://mharinga.github.io/insurancerating/news/index.html","id":"insurancerating-072","dir":"Changelog","previous_headings":"","what":"insurancerating 0.7.2","title":"insurancerating 0.7.2","text":"CRAN release: 2022-12-20 update_glm() now always returns correct interval case function used combination smooth_coef()","code":""},{"path":"https://mharinga.github.io/insurancerating/news/index.html","id":"insurancerating-071","dir":"Changelog","previous_headings":"","what":"insurancerating 0.7.1","title":"insurancerating 0.7.1","text":"CRAN release: 2022-09-06 rotate_angle autoplot.univariate() added rotate x-labels univariate() now accepts external vectors x; vec_ext() must used","code":""},{"path":"https://mharinga.github.io/insurancerating/news/index.html","id":"insurancerating-070","dir":"Changelog","previous_headings":"","what":"insurancerating 0.7.0","title":"insurancerating 0.7.0","text":"CRAN release: 2022-07-08 smooth_coef() now gives correct results intervals scientific notation reduce() now returns errors anymore columns dates POSIXt format","code":""},{"path":"https://mharinga.github.io/insurancerating/news/index.html","id":"insurancerating-069","dir":"Changelog","previous_headings":"","what":"insurancerating 0.6.9","title":"insurancerating 0.6.9","text":"CRAN release: 2021-12-11 refit_glm() renamed update_glm() construct_model_points() model_data() added create model points","code":""},{"path":"https://mharinga.github.io/insurancerating/news/index.html","id":"insurancerating-068","dir":"Changelog","previous_headings":"","what":"insurancerating 0.6.8","title":"insurancerating 0.6.8","text":"CRAN release: 2021-11-10 show_total autoplot.univariate() added add line total groups case used univariate(); total_color can used change color line, total_name added change name legend line rating_factors() now accepts GLMs intercept fit_truncated_dist() added fit original distribution (gamma, lognormal) truncated severity data join_to_nearest() now returns NA case NA used input","code":""},{"path":"https://mharinga.github.io/insurancerating/news/index.html","id":"insurancerating-067","dir":"Changelog","previous_headings":"","what":"insurancerating 0.6.7","title":"insurancerating 0.6.7","text":"CRAN release: 2021-07-28 smooth_coef() now returns error message intervals obtained cut() get_data() added return data used refit_glm()","code":""},{"path":"https://mharinga.github.io/insurancerating/news/index.html","id":"insurancerating-066","dir":"Changelog","previous_headings":"","what":"insurancerating 0.6.6","title":"insurancerating 0.6.6","text":"CRAN release: 2021-05-19 summary.reduce() now gives correct aggregation periods “months” “quarters” rows_per_date() added determine active portfolio certain date","code":""},{"path":"https://mharinga.github.io/insurancerating/news/index.html","id":"insurancerating-065","dir":"Changelog","previous_headings":"","what":"insurancerating 0.6.5","title":"insurancerating 0.6.5","text":"CRAN release: 2021-03-22 smooth_coef() restrict_coef() added model refinement histbin() now uses darkblue default fill color","code":""},{"path":"https://mharinga.github.io/insurancerating/news/index.html","id":"insurancerating-064","dir":"Changelog","previous_headings":"","what":"insurancerating 0.6.4","title":"insurancerating 0.6.4","text":"CRAN release: 2021-01-12 summary.reduce(), name can used change name new column output. Dataset MTPL now contains extra columns power, bm, zip. functions insight renamed, therefore insight::format_table() replaced insight::export_table().","code":""},{"path":"https://mharinga.github.io/insurancerating/news/index.html","id":"insurancerating-063","dir":"Changelog","previous_headings":"","what":"insurancerating 0.6.3","title":"insurancerating 0.6.3","text":"CRAN release: 2020-10-28 fit_gam() pure premium now using average premium x calculated sum(pure_premium * exposure) / sum(exposure) instead sum(pure_premium) / sum(exposure) (#2). histbin() added create histograms outliers reduce now returns data.frame output","code":""},{"path":"https://mharinga.github.io/insurancerating/news/index.html","id":"insurancerating-062","dir":"Changelog","previous_headings":"","what":"insurancerating 0.6.2","title":"insurancerating 0.6.2","text":"CRAN release: 2020-06-08 check_normality() now depreciated; use check_residuals() instead detect overall deviations expected distribution rating_factors() now shows significance stars p-values period_to_months() arithmetic operations dates rewritten; much faster univariate() now argument determine summary statistics different subgroups","code":""},{"path":"https://mharinga.github.io/insurancerating/news/index.html","id":"insurancerating-061","dir":"Changelog","previous_headings":"","what":"insurancerating 0.6.1","title":"insurancerating 0.6.1","text":"CRAN release: 2020-04-29 univariate_all() autoplot.univ_all() now depreciated; use univariate() autoplot.univariate() instead check_overdispersion(), check_normality(), model_performance(), bootstrap_rmse(), add_prediction() added test model quality return performance metrics reduce() added reduce insurance portfolio merging redundant date ranges","code":""},{"path":"https://mharinga.github.io/insurancerating/news/index.html","id":"insurancerating-060","dir":"Changelog","previous_headings":"","what":"insurancerating 0.6.0","title":"insurancerating 0.6.0","text":"CRAN release: 2020-04-10 label_width autoplot() added wrap long labels multiple lines sort_manual autoplot() added sort risk factors ordering autoplot() now works without manually loading package ggplot2 patchwork first rating_factors() now returns object class riskfactor autoplot.riskfactor() added create corresponding plots output given rating_factors()","code":""},{"path":"https://mharinga.github.io/insurancerating/news/index.html","id":"insurancerating-052","dir":"Changelog","previous_headings":"","what":"insurancerating 0.5.2","title":"insurancerating 0.5.2","text":"CRAN release: 2020-03-30 autoplot.univ_all() now gives correct labels x-axis ncol > 1.","code":""},{"path":"https://mharinga.github.io/insurancerating/news/index.html","id":"insurancerating-051","dir":"Changelog","previous_headings":"","what":"insurancerating 0.5.1","title":"insurancerating 0.5.1","text":"CRAN release: 2020-03-29 package website added using pkgdown. construct_tariff_classes() fit_gam() now returns tariff classes fitted gam respectively; items stored attributes. univariate_frequency(), univariate_average_severity(), univariate_risk_premium(), univariate_loss_ratio(), univariate_average_premium(), univariate_exposure(), univariate_all() added perform univariate analysis insurance portfolio. autoplot() creates corresponding plots summary statistics calculated univariate_*.","code":""},{"path":"https://mharinga.github.io/insurancerating/news/index.html","id":"insurancerating-050","dir":"Changelog","previous_headings":"","what":"insurancerating 0.5.0","title":"insurancerating 0.5.0","text":"CRAN release: 2020-03-12 construct_tariff_classes() now split fit_gam() construct_tariff_classes(). vignette added use package.","code":""},{"path":"https://mharinga.github.io/insurancerating/news/index.html","id":"insurancerating-043","dir":"Changelog","previous_headings":"","what":"insurancerating 0.4.3","title":"insurancerating 0.4.3","text":"CRAN release: 2019-11-01 period_to_months() added split rows time period longer one month multiple rows time period exactly one month .","code":""},{"path":"https://mharinga.github.io/insurancerating/news/index.html","id":"insurancerating-042","dir":"Changelog","previous_headings":"","what":"insurancerating 0.4.2","title":"insurancerating 0.4.2","text":"CRAN release: 2019-05-31 construct_tariff_classes(), model now also accepts ‘severity’ specification.","code":""}]
