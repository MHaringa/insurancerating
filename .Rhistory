mtcars1 <- mtcars %>%
mutate(disp_cut = cut(disp, breaks = c(0, 10, 100, 500))) %>%
mutate(disp_cut2 = case_when(between(disp, 0, 100) ~ "0-100",
between(disp, 100, 1000) ~ "100 en hoger"))
x2 <- cut_borders_df1(mtcars1, "disp_cut2")
mtcars1 <- mtcars %>%
mutate(disp_cut = cut(disp, breaks = c(0, 10, 100, 50000))) %>%
mutate(disp_cut2 = case_when(between(disp, 0, 100) ~ "0-100",
between(disp, 100, 1000) ~ "100 en hoger"))
x2 <- cut_borders_df1(mtcars1, "disp_cut")
cut_borders_df1 <- function(df, col){
if (!col %in% names(df)) stop("Column name must be available in data", call. = FALSE)
df_vec <- df[[col]]
pattern <- "(\\(|\\[)(-*[0-9]+\\.*[0-9]*),(-*[0-9]+\\.*[0-9]*)(\\)|\\])"
suppressWarnings({
df$start_oc <- ifelse(gsub(pattern,"\\1", df_vec) == "(", "open",
ifelse(gsub(pattern,"\\1", df_vec) == "[", "closed", NA))
df$end_oc <- ifelse(gsub(pattern,"\\4", df_vec) == ")", "open",
ifelse(gsub(pattern,"\\4", df_vec) == "]", "closed", NA))
df$start_  <- as.numeric(gsub(pattern,"\\2", df_vec))
df$end_ <- as.numeric(gsub(pattern,"\\3", df_vec))
})
df$avg_ <- rowMeans(df[, c('start_', 'end_')], na.rm = TRUE)
#if( any(is.na(df$avg_)) ) stop(
#"Can't find cut points in column ", col, ". Intervals in ", col,
#" should be in the same format as the output from cut().
#Use e.g. cut() or insurancerating::construct_tariff_classes().",
#call. = FALSE)
return(df)
}
library(dplyr)
mtcars1 <- mtcars %>%
mutate(disp_cut = cut(disp, breaks = c(0, 10, 100, 50000))) %>%
mutate(disp_cut2 = case_when(between(disp, 0, 100) ~ "0-100",
between(disp, 100, 1000) ~ "100 en hoger"))
x2 <- cut_borders_df1(mtcars1, "disp_cut")
x2
?cut
mtcars1 <- mtcars %>%
mutate(disp_cut = cut(disp, breaks = c(0, 10, 100, 50000))) %>%
mutate(disp_cut2 = case_when(between(disp, 0, 100) ~ "0-100",
between(disp, 100, 1000) ~ "100 en hoger"))
grepl(mtcars1$disp_cut, "e", fixed = TRUE)
grep(mtcars1$disp_cut, "e", fixed = TRUE)
grepl(mtcars1$disp_cut, "e", fixed = FALSE)
grepl(mtcars1$disp_cut, "e", fixed = TRUE)
sapply(mtcars1$disp_cut, function(x) grepl(x, "e", fixed = TRUE))
mtcars1
grepl("(100,5e+04]", "e", fixed = TRUE)
grepl("e", "(100,5e+04]", fixed = TRUE)
sapply(mtcars1$disp_cut, function(x) grepl("e", x, fixed = TRUE))
any(sapply(mtcars1$disp_cut, function(x) grepl("e", x, fixed = TRUE)))
cut_borders_df1 <- function(df, col){
if (!col %in% names(df)) stop("Column name must be available in data", call. = FALSE)
df_vec <- df[[col]]
if ( any(sapply(df_vec, function(x) grepl("e", x, fixed = TRUE))) )
stop("Can't handle scientific notation in ", col, ".
Use dig.lab in cut() for intervals without scientific notation.")
pattern <- "(\\(|\\[)(-*[0-9]+\\.*[0-9]*),(-*[0-9]+\\.*[0-9]*)(\\)|\\])"
suppressWarnings({
df$start_oc <- ifelse(gsub(pattern,"\\1", df_vec) == "(", "open",
ifelse(gsub(pattern,"\\1", df_vec) == "[", "closed", NA))
df$end_oc <- ifelse(gsub(pattern,"\\4", df_vec) == ")", "open",
ifelse(gsub(pattern,"\\4", df_vec) == "]", "closed", NA))
df$start_  <- as.numeric(gsub(pattern,"\\2", df_vec))
df$end_ <- as.numeric(gsub(pattern,"\\3", df_vec))
})
df$avg_ <- rowMeans(df[, c('start_', 'end_')], na.rm = TRUE)
#if( any(is.na(df$avg_)) ) stop(
#"Can't find cut points in column ", col, ". Intervals in ", col,
#" should be in the same format as the output from cut().
#Use e.g. cut() or insurancerating::construct_tariff_classes().",
#call. = FALSE)
return(df)
}
mtcars1 <- mtcars %>%
mutate(disp_cut = cut(disp, breaks = c(0, 10, 100, 50000))) %>%
mutate(disp_cut2 = case_when(between(disp, 0, 100) ~ "0-100",
between(disp, 100, 1000) ~ "100 en hoger"))
cut_borders_df1(mtcars1, "disp_cut")
cut_borders_df1 <- function(df, col){
if (!col %in% names(df)) stop("Column name must be available in data", call. = FALSE)
df_vec <- df[[col]]
if ( any(sapply(df_vec, function(x) grepl("e", x, fixed = TRUE))) )
stop(
"Can't handle scientific notation in ", col, ".
Use dig.lab in cut() for intervals without scientific notation."
)
pattern <- "(\\(|\\[)(-*[0-9]+\\.*[0-9]*),(-*[0-9]+\\.*[0-9]*)(\\)|\\])"
suppressWarnings({
df$start_oc <- ifelse(gsub(pattern,"\\1", df_vec) == "(", "open",
ifelse(gsub(pattern,"\\1", df_vec) == "[", "closed", NA))
df$end_oc <- ifelse(gsub(pattern,"\\4", df_vec) == ")", "open",
ifelse(gsub(pattern,"\\4", df_vec) == "]", "closed", NA))
df$start_  <- as.numeric(gsub(pattern,"\\2", df_vec))
df$end_ <- as.numeric(gsub(pattern,"\\3", df_vec))
})
df$avg_ <- rowMeans(df[, c('start_', 'end_')], na.rm = TRUE)
#if( any(is.na(df$avg_)) ) stop(
#"Can't find cut points in column ", col, ". Intervals in ", col,
#" should be in the same format as the output from cut().
#Use e.g. cut() or insurancerating::construct_tariff_classes().",
#call. = FALSE)
return(df)
}
library(dplyr)
mtcars1 <- mtcars %>%
mutate(disp_cut = cut(disp, breaks = c(0, 10, 100, 50000))) %>%
mutate(disp_cut2 = case_when(between(disp, 0, 100) ~ "0-100",
between(disp, 100, 1000) ~ "100 en hoger"))
cut_borders_df1(mtcars1, "disp_cut")
cut_borders_df1 <- function(df, col){
if (!col %in% names(df)) stop("Column name must be available in data", call. = FALSE)
df_vec <- df[[col]]
if ( any(sapply(df_vec, function(x) grepl("e", x, fixed = TRUE))) )
stop(
"Can't handle scientific notation in ", col, ".
Use dig.lab in cut() for intervals without scientific notation.",
call. = FALSE
)
pattern <- "(\\(|\\[)(-*[0-9]+\\.*[0-9]*),(-*[0-9]+\\.*[0-9]*)(\\)|\\])"
suppressWarnings({
df$start_oc <- ifelse(gsub(pattern,"\\1", df_vec) == "(", "open",
ifelse(gsub(pattern,"\\1", df_vec) == "[", "closed", NA))
df$end_oc <- ifelse(gsub(pattern,"\\4", df_vec) == ")", "open",
ifelse(gsub(pattern,"\\4", df_vec) == "]", "closed", NA))
df$start_  <- as.numeric(gsub(pattern,"\\2", df_vec))
df$end_ <- as.numeric(gsub(pattern,"\\3", df_vec))
})
df$avg_ <- rowMeans(df[, c('start_', 'end_')], na.rm = TRUE)
if( any(is.na(df$avg_)) ) stop(
"Can't find cut points in column ", col, ". Intervals in ", col,
" should be in the same format as the output from cut().
Use e.g. cut() or insurancerating::construct_tariff_classes().",
call. = FALSE)
return(df)
}
library(dplyr)
mtcars1 <- mtcars %>%
mutate(disp_cut = cut(disp, breaks = c(0, 10, 100, 50000))) %>%
mutate(disp_cut2 = case_when(between(disp, 0, 100) ~ "0-100",
between(disp, 100, 1000) ~ "100 en hoger"))
cut_borders_df1(mtcars1, "disp_cut")
mtcars1 <- mtcars %>%
mutate(disp_cut = cut(disp, breaks = c(0, 10, 100, 500))) %>%
mutate(disp_cut2 = case_when(between(disp, 0, 100) ~ "0-100",
between(disp, 100, 1000) ~ "100 en hoger"))
cut_borders_df1(mtcars1, "disp_cut")
mtcars1 <- mtcars %>%
mutate(disp_cut = cut(disp, breaks = c(0, 10, 100, 50000))) %>%
mutate(disp_cut2 = case_when(between(disp, 0, 100) ~ "0-100",
between(disp, 100, 1000) ~ "100 en hoger"))
cut_borders_df1(mtcars1, "disp_cut")
cut_borders_df1(mtcars1, "disp_cut2")
mtcars %>%
mutate(disp_cut = cut(disp, breaks = c(0, 10, 100, 50000)))
cut_borders_df1 <- function(df, col){
if (!col %in% names(df)) stop("Column name must be available in data", call. = FALSE)
df_vec <- df[[col]]
if ( any(sapply(df_vec, function(x) grepl("e\\+||e\\-", x, fixed = TRUE))) )
stop(
"Can't handle scientific notation in ", col, ".
Use dig.lab in cut() for intervals without scientific notation.",
call. = FALSE
)
pattern <- "(\\(|\\[)(-*[0-9]+\\.*[0-9]*),(-*[0-9]+\\.*[0-9]*)(\\)|\\])"
suppressWarnings({
df$start_oc <- ifelse(gsub(pattern,"\\1", df_vec) == "(", "open",
ifelse(gsub(pattern,"\\1", df_vec) == "[", "closed", NA))
df$end_oc <- ifelse(gsub(pattern,"\\4", df_vec) == ")", "open",
ifelse(gsub(pattern,"\\4", df_vec) == "]", "closed", NA))
df$start_  <- as.numeric(gsub(pattern,"\\2", df_vec))
df$end_ <- as.numeric(gsub(pattern,"\\3", df_vec))
})
df$avg_ <- rowMeans(df[, c('start_', 'end_')], na.rm = TRUE)
if( any(is.na(df$avg_)) ) stop(
"Can't find cut points in column ", col, ". Intervals in ", col,
" should be in the same format as the output from cut().
Use e.g. cut() or insurancerating::construct_tariff_classes().",
call. = FALSE)
return(df)
}
library(dplyr)
mtcars1 <- mtcars %>%
mutate(disp_cut = cut(disp, breaks = c(0, 10, 100, 50000))) %>%
mutate(disp_cut2 = case_when(between(disp, 0, 100) ~ "0-100",
between(disp, 100, 1000) ~ "100 en hoger"))
cut_borders_df1(mtcars1, "disp_cut2")
cut_borders_df1(mtcars1, "disp_cut")
cut_borders_df1 <- function(df, col){
if (!col %in% names(df)) stop("Column name must be available in data", call. = FALSE)
df_vec <- df[[col]]
if ( any(sapply(df_vec, function(x) grepl("e\\+|e\\-", x, fixed = TRUE))) )
stop(
"Can't handle scientific notation in ", col, ".
Use dig.lab in cut() for intervals without scientific notation.",
call. = FALSE
)
pattern <- "(\\(|\\[)(-*[0-9]+\\.*[0-9]*),(-*[0-9]+\\.*[0-9]*)(\\)|\\])"
suppressWarnings({
df$start_oc <- ifelse(gsub(pattern,"\\1", df_vec) == "(", "open",
ifelse(gsub(pattern,"\\1", df_vec) == "[", "closed", NA))
df$end_oc <- ifelse(gsub(pattern,"\\4", df_vec) == ")", "open",
ifelse(gsub(pattern,"\\4", df_vec) == "]", "closed", NA))
df$start_  <- as.numeric(gsub(pattern,"\\2", df_vec))
df$end_ <- as.numeric(gsub(pattern,"\\3", df_vec))
})
df$avg_ <- rowMeans(df[, c('start_', 'end_')], na.rm = TRUE)
if( any(is.na(df$avg_)) ) stop(
"Can't find cut points in column ", col, ". Intervals in ", col,
" should be in the same format as the output from cut().
Use e.g. cut() or insurancerating::construct_tariff_classes().",
call. = FALSE)
return(df)
}
library(dplyr)
mtcars1 <- mtcars %>%
mutate(disp_cut = cut(disp, breaks = c(0, 10, 100, 50000))) %>%
mutate(disp_cut2 = case_when(between(disp, 0, 100) ~ "0-100",
between(disp, 100, 1000) ~ "100 en hoger"))
cut_borders_df1(mtcars1, "disp_cut")
mtcars1
cut_borders_df1 <- function(df, col){
if (!col %in% names(df)) stop("Column name must be available in data", call. = FALSE)
df_vec <- df[[col]]
if ( any(sapply(df_vec, function(x) grepl("e\\+|e\\-", x, fixed = TRUE))) )
stop(
"Can't handle scientific notation in ", col, ".
Use dig.lab in cut() for intervals without scientific notation.",
call. = FALSE
)
pattern <- "(\\(|\\[)(-*[0-9]+\\.*[0-9]*),(-*[0-9]+\\.*[0-9]*)(\\)|\\])"
suppressWarnings({
df$start_oc <- ifelse(gsub(pattern,"\\1", df_vec) == "(", "open",
ifelse(gsub(pattern,"\\1", df_vec) == "[", "closed", NA))
df$end_oc <- ifelse(gsub(pattern,"\\4", df_vec) == ")", "open",
ifelse(gsub(pattern,"\\4", df_vec) == "]", "closed", NA))
df$start_  <- as.numeric(gsub(pattern,"\\2", df_vec))
df$end_ <- as.numeric(gsub(pattern,"\\3", df_vec))
})
df$avg_ <- rowMeans(df[, c('start_', 'end_')], na.rm = TRUE)
if( any(is.na(df$avg_)) ) stop(
"Can't find cut points in column ", col, ". Intervals in ", col,
" should be in the same format as the output from cut().
Use e.g. cut() or insurancerating::construct_tariff_classes().",
call. = FALSE)
return(df)
}
cut_borders_df1 <- function(df, col){
if (!col %in% names(df)) stop("Column name must be available in data", call. = FALSE)
df_vec <- df[[col]]
pattern <- "(\\(|\\[)(-*[0-9]+\\.*[0-9]*),(-*[0-9]+\\.*[0-9]*)(\\)|\\])"
suppressWarnings({
df$start_oc <- ifelse(gsub(pattern,"\\1", df_vec) == "(", "open",
ifelse(gsub(pattern,"\\1", df_vec) == "[", "closed", NA))
df$end_oc <- ifelse(gsub(pattern,"\\4", df_vec) == ")", "open",
ifelse(gsub(pattern,"\\4", df_vec) == "]", "closed", NA))
df$start_  <- as.numeric(gsub(pattern,"\\2", df_vec))
df$end_ <- as.numeric(gsub(pattern,"\\3", df_vec))
})
df$avg_ <- rowMeans(df[, c('start_', 'end_')], na.rm = TRUE)
if( any(is.na(df$avg_)) ) stop(
"Can't find cut points in column ", col, ". Intervals in ", col,
" should be in the same format as the output from cut().
Use e.g. cut() or insurancerating::construct_tariff_classes().",
call. = FALSE)
return(df)
}
mtcars1 <- mtcars %>%
mutate(disp_cut = cut(disp, breaks = c(0, 10, 100, 50000))) %>%
mutate(disp_cut2 = case_when(between(disp, 0, 100) ~ "0-100",
between(disp, 100, 1000) ~ "100 en hoger"))
cut_borders_df1(mtcars1, "disp_cut")
cut_borders_df1(mtcars1, "disp_cut2")
knitr::opts_chunk$set(
fig.path = "man/figures/"
)
library(insurancerating)
# Claim frequency
age_policyholder_frequency <- fit_gam(data = MTPL,
nclaims = nclaims,
x = age_policyholder,
exposure = exposure)
# Claim severity
age_policyholder_severity <- fit_gam(data = MTPL,
nclaims = nclaims,
x = age_policyholder,
exposure = exposure,
amount = amount,
model = "severity")
autoplot(age_policyholder_frequency, show_observations = TRUE)
clusters_freq <- construct_tariff_classes(age_policyholder_frequency)
clusters_sev <- construct_tariff_classes(age_policyholder_severity)
autoplot(clusters_freq, show_observations = TRUE)
age_policyholder_severity %>%
autoplot(., show_observations = TRUE, remove_outliers = 100000)
library(dplyr)
dat <- MTPL %>%
mutate(age_policyholder_freq_cat = clusters_freq$tariff_classes) %>%
mutate(across(where(is.character), as.factor)) %>%
mutate(across(where(is.factor), ~biggest_reference(., exposure)))
glimpse(dat)
model_freq1 <- glm(nclaims ~ age_policyholder_freq_cat, offset = log(exposure),
family = "poisson", data = dat)
model_freq2 <- glm(nclaims ~ age_policyholder_freq_cat + age_policyholder, offset = log(exposure),
family = "poisson", data = dat)
x <- rating_factors(model_freq1, model_freq2)
x
autoplot(x)
rating_factors(model_freq1, model_freq2, model_data = dat) %>%
autoplot()
rating_factors(model_freq1, model_freq2, model_data = dat, exposure = exposure) %>%
autoplot(., linetype = TRUE)
dat_pred <- dat %>%
add_prediction(model_freq1, model_freq2)
glimpse(dat_pred)
model_performance(model_freq1, model_freq2)
bootstrap_rmse(model_freq1, dat, n = 100, show_progress = FALSE) %>%
autoplot(.)
check_overdispersion(model_freq1)
check_residuals(model_freq1, n_simulations = 1000) %>%
autoplot(.)
library(insurancerating)
univariate(MTPL2,
x = area, # discrete risk factor
nclaims = nclaims, # number of claims
exposure = exposure,
premium = premium,
severity = amount) # loss
univariate(MTPL2, x = area, nclaims = nclaims, exposure = exposure)
univariate(MTPL2, x = area, nclaims = nclaims, exposure = exposure) %>%
autoplot(.)
univariate(MTPL2, x = area, nclaims = nclaims, exposure = exposure) %>%
autoplot(., show_plots = c(6,1))
MTPL2 %>%
mutate(year = sample(2016:2019, nrow(.), replace = TRUE)) %>%
univariate(., x = area, nclaims = nclaims,
exposure = exposure, by = year) %>%
autoplot(., show_plots = 1)
univariate(MTPL2, x = area, nclaims = nclaims, exposure = exposure) %>%
autoplot(., show_plots = c(6,1), background = FALSE)
univariate(MTPL2, x = area, nclaims = nclaims, exposure = exposure) %>%
autoplot(., show_plots = c(6,1), background = FALSE, sort = TRUE)
univariate(MTPL2, x = area, nclaims = nclaims, exposure = exposure) %>%
autoplot(., show_plots = c(6,1), background = FALSE, sort_manual = c("2", "3", "1", "0"))
univariate(MTPL2, x = area, nclaims = nclaims, exposure = exposure) %>%
autoplot(., show_plots = c(6,1), background = FALSE, sort = TRUE, ncol = 2,
color_bg = "dodgerblue", color = "blue")
univariate(MTPL2, x = area, nclaims = nclaims) %>%
autoplot(., show_plots = 8, coord_flip = TRUE, sort = TRUE)
histbin(MTPL2, premium)
histbin(MTPL2, premium, right = 110)
mod_freq <- glm(nclaims ~ zip + age_policyholder_freq_cat,
offset = log(exposure),
family = "poisson",
data = dat)
mod_sev <- glm(amount ~ bm + zip,
weights = nclaims,
family = Gamma(link = "log"),
data = dat %>% filter(amount > 0))
MTPL_premium <- dat %>%
add_prediction(mod_freq, mod_sev) %>%
mutate(premium = pred_nclaims_mod_freq * pred_amount_mod_sev)
burn_unrestricted <- glm(premium ~ zip + bm + age_policyholder_freq_cat,
weights = exposure,
family = Gamma(link = "log"),
data = MTPL_premium)
burn_unrestricted %>%
smooth_coef(x_cut = "age_policyholder_freq_cat",
x_org = "age_policyholder",
breaks = seq(18, 95, 5)) %>%
print()
burn_unrestricted %>%
smooth_coef(x_cut = "age_policyholder_freq_cat",
x_org = "age_policyholder",
breaks = seq(18, 95, 5)) %>%
autoplot()
burn_unrestricted %>%
smooth_coef(x_cut = "age_policyholder_freq_cat",
x_org = "age_policyholder",
degree = 1,
breaks = seq(18, 95, 5)) %>%
autoplot()
burn_restricted <- burn_unrestricted %>%
smooth_coef(x_cut = "age_policyholder_freq_cat",
x_org = "age_policyholder",
breaks = seq(18, 95, 5)) %>%
refit_glm()
# Show rating factors
rating_factors(burn_restricted)
zip_df <- data.frame(zip = c(0,1,2,3),
zip_restricted = c(0.8, 0.9, 1, 1.2))
burn_unrestricted %>%
restrict_coef(., zip_df) %>%
print()
burn_restricted2 <- burn_unrestricted %>%
restrict_coef(., zip_df) %>%
refit_glm()
rating_factors(burn_restricted2)
burn_unrestricted %>%
restrict_coef(., zip_df) %>%
autoplot()
burn_restricted3$call$data
burn_restricted3 <- burn_unrestricted %>%
restrict_coef(., zip_df) %>%
smooth_coef(x_cut = "age_policyholder_freq_cat",
x_org = "age_policyholder",
breaks = seq(18, 95, 5)) %>%
refit_glm()
burn_restricted3
burn_restricted3$call$data
burn_restricted3$call
burn_restricted
burn_restricted3
str(burn_restricted3)
burn_restricted3$model$data
str(burn_restricted3)
burn_restricted3$model
model.frame(burn_restricted3)
str(burn_restricted3)
burn_restricted3$data
#'  `get_data()` is used to get data from refitted generalized linear models, and must be
#'  preceded by `refit_glm()`.
#'
#' @param x Object of class refitsmooth or of class refitrestricted
#'
#' @author Martin Haringa
#'
#' @return data.frame
#'
#' @export
get_data <- function(x){
if( !inherits(x, c("refitsmooth", "refitrestricted")) ) {
stop("Input must be of class refitsmooth or of class refitrestricted", call. = FALSE)
}
xdf <- x$data
xdf[!names(xdf) %in% c("breaks_min", "breaks_max",
"start_oc", "end_oc",
"start_", "end_",
"avg_", "risk_factor")]
}
get_data(burn_restricted3)
get_data(burn_restricted3) %>%
add_prediction(burn_restricted3)
get_data(burn_restricted3)
x <- get_data(burn_restricted3)
x %>%
add_prediction(burn_restricted3)
premiums3 <- get_data(burn_restricted3) %>%
add_prediction(burn_restricted3)
head(premiums3)
# Show rating factors
rating_factors(burn_restricted3)
devtools::document()
devtools::document()
devtools::document()
library(insurancerating)
pkgdown::build_site()
install.packages("pkgdown")
pkgdown::build_site()
install.packages("spelling")
devtools::check_rhub()
devtools::release()
hunspell::hunspell_check()
usethis::use_spell_check()
devtools::spell_check()
devtools::release()
cut_borders_df1 <- function(df, col){
if (!col %in% names(df)) stop("Column name must be available in data", call. = FALSE)
df_vec <- df[[col]]
pattern <- "(\\(|\\[)(-*[0-9]+\\.*[0-9]*),(-*[0-9]+\\.*[0-9]*)(\\)|\\])"
suppressWarnings({
df$start_oc <- ifelse(gsub(pattern,"\\1", df_vec) == "(", "open",
ifelse(gsub(pattern,"\\1", df_vec) == "[", "closed", NA))
df$end_oc <- ifelse(gsub(pattern,"\\4", df_vec) == ")", "open",
ifelse(gsub(pattern,"\\4", df_vec) == "]", "closed", NA))
df$start_  <- as.numeric(gsub(pattern,"\\2", df_vec))
df$end_ <- as.numeric(gsub(pattern,"\\3", df_vec))
})
df$avg_ <- rowMeans(df[, c('start_', 'end_')], na.rm = TRUE)
if( any(is.na(df$avg_)) ) stop(
"Can't find cut points in column ", col, ". Intervals in ", col,
" should be in the same format as the output from cut().
Use e.g. cut() or insurancerating::construct_tariff_classes().",
call. = FALSE)
return(df)
}
library(dplyr)
mtcars1 <- mtcars %>%
mutate(disp_cut = cut(disp, breaks = c(0, 10, 100, 50000))) %>%
mutate(disp_cut2 = case_when(between(disp, 0, 100) ~ "0-100",
between(disp, 100, 1000) ~ "100 en hoger"))
cut_borders_df1(mtcars1, "disp_cut2")
cut_borders_df1(mtcars1, "disp_cut")
mtcars1 <- mtcars %>%
mutate(disp_cut = cut(disp, breaks = c(0, 10, 100, 500))) %>%
mutate(disp_cut2 = case_when(between(disp, 0, 100) ~ "0-100",
between(disp, 100, 1000) ~ "100 en hoger"))
cut_borders_df1(mtcars1, "disp_cut")
mtcars1 <- mtcars %>%
mutate(disp_cut = cut(disp, breaks = c(0, 10, 100, 50000), dig.lab = 5)) %>%
mutate(disp_cut2 = case_when(between(disp, 0, 100) ~ "0-100",
between(disp, 100, 1000) ~ "100 en hoger"))
cut_borders_df1(mtcars1, "disp_cut")
mtcars1 <- mtcars %>%
mutate(disp_cut = cut(disp, breaks = c(0, 10, 100, 50000), dig.lab = 2)) %>%
mutate(disp_cut2 = case_when(between(disp, 0, 100) ~ "0-100",
between(disp, 100, 1000) ~ "100 en hoger"))
cut_borders_df1(mtcars1, "disp_cut")
install.packages(c("blob", "broom", "cli", "credentials", "e1071", "googlesheets4", "isoband", "jpeg", "matrixStats", "Rcpp", "RcppArmadillo", "readr", "rvest", "sf", "stringi", "tibble", "utf8", "wk"))
library(insurancerating)
devtools::document()
