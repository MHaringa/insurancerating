% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/truncated_severity.R
\name{fit_truncated_dist}
\alias{fit_truncated_dist}
\title{Fit a distribution to truncated severity (loss) data}
\usage{
fit_truncated_dist(
  y,
  dist = c("gamma", "lognormal"),
  left = NULL,
  right = NULL,
  start = NULL,
  print_initial = TRUE
)
}
\arguments{
\item{y}{vector with observations of losses}

\item{dist}{distribution for severity ("gamma" or "lognormal"). Defaults to "gamma".}

\item{left}{numeric. Observations below this threshold are not present in the sample.}

\item{right}{numeric. Observations above this threshold are not present in the sample. Defaults to Inf.}

\item{start}{list of starting parameters for the algorithm.}

\item{print_initial}{print attempts for initial parameters.}
}
\value{
fitdist returns an object of class "fitdist"
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}} Estimate the original distribution from truncated data. Truncated data arise frequently in insurance studies. It is common that only claims above a certain threshold are known.
}
\examples{
\dontrun{
# Original observations for severity
set.seed(1)
e <- rgamma(1000, scale = 148099.5, shape = 0.4887023)

# Truncated data (only claims above 30.000 euros)
threshold <- 30000
f <- e[e > threshold]

library(dplyr)
library(ggplot2)
data.frame(value = c(e, f),
variable = rep(c("Original data", "Only claims above 30.000 euros"),
               c(length(e), length(f)))) \%>\%
               filter(value < 5e5) \%>\%
               mutate(value = value / 1000) \%>\%
               ggplot(aes(x = value)) +
               geom_histogram(colour = "white") +
               facet_wrap(~variable, ncol = 1) +
               labs(y = "Number of observations", x = "Severity (x 1000 EUR)")

# scale = 156259.7 and shape = 0.4588. Close to parameters of original distribution!
x <- fit_truncated_dist(f, left = threshold, dist = "gamma")

est_scale <- x$estimate[1]
est_shape <- x$estimate[2]

# Claims below 1 mln
pgamma(1e6, scale = est_scale, shape = est_shape)

# Claims between 0.5 mln and 1 mln
claims_between <- pgamma(1e6, scale = est_scale, shape = est_shape) -
pgamma(5e5, scale = est_scale, shape = est_shape)

# That is 1 per 104 claims
1 / claims_between
}

}
\author{
Martin Haringa
}
